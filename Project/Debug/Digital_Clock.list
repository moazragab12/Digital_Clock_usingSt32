
Digital_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000161c  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd8  08004fd8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd8  08004fd8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000006c  0800504c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800504c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000771f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c74  00000000  00000000  000277f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00029470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017923  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a325  00000000  00000000  00041613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ce7  00000000  00000000  0004b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000063b  00000000  00000000  000cf61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025ac  00000000  00000000  000cfc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d2208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080039a4 	.word	0x080039a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080039a4 	.word	0x080039a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b098      	sub	sp, #96	; 0x60
 8000160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fecd 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 fa37 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fb15 	bl	8000798 <MX_GPIO_Init>
  MX_RTC_Init();
 800016e:	f000 fa91 	bl	8000694 <MX_RTC_Init>
  MX_SPI1_Init();
 8000172:	f000 fad9 	bl	8000728 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  char buffer[10];
  char sum[10] = "";
 8000176:	2300      	movs	r3, #0
 8000178:	637b      	str	r3, [r7, #52]	; 0x34
 800017a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	809a      	strh	r2, [r3, #4]
  char* bucket = sum + strlen(sum);
 8000184:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffdf 	bl	800014c <strlen>
 800018e:	4602      	mov	r2, r0
 8000190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000194:	4413      	add	r3, r2
 8000196:	64fb      	str	r3, [r7, #76]	; 0x4c
  char yearline[25]="";
 8000198:	2300      	movs	r3, #0
 800019a:	61bb      	str	r3, [r7, #24]
 800019c:	f107 031c 	add.w	r3, r7, #28
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
 80001ac:	751a      	strb	r2, [r3, #20]
  typedef enum
   { jan=1,feb,mar,april,may,june,july,aug,sept,oct,nov,dec

   } thismonth;

  HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80001ae:	2200      	movs	r2, #0
 80001b0:	497d      	ldr	r1, [pc, #500]	; (80003a8 <main+0x24c>)
 80001b2:	487e      	ldr	r0, [pc, #504]	; (80003ac <main+0x250>)
 80001b4:	f002 f9d0 	bl	8002558 <HAL_RTC_GetDate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ST7735_Init();
 80001b8:	f000 fc22 	bl	8000a00 <ST7735_Init>
	HAL_Delay(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c0:	f000 ff00 	bl	8000fc4 <HAL_Delay>
	ST7735_FillScreen(ST7735_YELLOW);
 80001c4:	201f      	movs	r0, #31
 80001c6:	f000 fd6b 	bl	8000ca0 <ST7735_FillScreen>
	HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ce:	f000 fef9 	bl	8000fc4 <HAL_Delay>
	ST7735_WriteString(5 ,4,"DIGITAL CLOCK" ,Font_7x10 ,ST7735_PURPLE,ST7735_YELLOW);
 80001d2:	4b77      	ldr	r3, [pc, #476]	; (80003b0 <main+0x254>)
 80001d4:	221f      	movs	r2, #31
 80001d6:	9202      	str	r2, [sp, #8]
 80001d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80001dc:	9201      	str	r2, [sp, #4]
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	9200      	str	r2, [sp, #0]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a73      	ldr	r2, [pc, #460]	; (80003b4 <main+0x258>)
 80001e6:	2104      	movs	r1, #4
 80001e8:	2005      	movs	r0, #5
 80001ea:	f000 fc9a 	bl	8000b22 <ST7735_WriteString>
	thisday day;
	switch(sDate.WeekDay)
 80001ee:	4b6e      	ldr	r3, [pc, #440]	; (80003a8 <main+0x24c>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	2b06      	cmp	r3, #6
 80001f6:	d879      	bhi.n	80002ec <main+0x190>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <main+0xa4>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000259 	.word	0x08000259
 8000204:	08000277 	.word	0x08000277
 8000208:	08000295 	.word	0x08000295
 800020c:	080002b1 	.word	0x080002b1
 8000210:	080002cf 	.word	0x080002cf
 8000214:	0800021d 	.word	0x0800021d
 8000218:	0800023b 	.word	0x0800023b
	{ case sat:	ST7735_WriteString(5 ,105,"saturday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 800021c:	4b66      	ldr	r3, [pc, #408]	; (80003b8 <main+0x25c>)
 800021e:	221f      	movs	r2, #31
 8000220:	9202      	str	r2, [sp, #8]
 8000222:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000226:	9201      	str	r2, [sp, #4]
 8000228:	685a      	ldr	r2, [r3, #4]
 800022a:	9200      	str	r2, [sp, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a63      	ldr	r2, [pc, #396]	; (80003bc <main+0x260>)
 8000230:	2169      	movs	r1, #105	; 0x69
 8000232:	2005      	movs	r0, #5
 8000234:	f000 fc75 	bl	8000b22 <ST7735_WriteString>
		break;
 8000238:	e059      	b.n	80002ee <main+0x192>
	case sun:ST7735_WriteString(5 ,105,"sunday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 800023a:	4b5f      	ldr	r3, [pc, #380]	; (80003b8 <main+0x25c>)
 800023c:	221f      	movs	r2, #31
 800023e:	9202      	str	r2, [sp, #8]
 8000240:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000244:	9201      	str	r2, [sp, #4]
 8000246:	685a      	ldr	r2, [r3, #4]
 8000248:	9200      	str	r2, [sp, #0]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a5c      	ldr	r2, [pc, #368]	; (80003c0 <main+0x264>)
 800024e:	2169      	movs	r1, #105	; 0x69
 8000250:	2005      	movs	r0, #5
 8000252:	f000 fc66 	bl	8000b22 <ST7735_WriteString>
			break;
 8000256:	e04a      	b.n	80002ee <main+0x192>
	case mon:ST7735_WriteString(5,105,"monday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 8000258:	4b57      	ldr	r3, [pc, #348]	; (80003b8 <main+0x25c>)
 800025a:	221f      	movs	r2, #31
 800025c:	9202      	str	r2, [sp, #8]
 800025e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000262:	9201      	str	r2, [sp, #4]
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	9200      	str	r2, [sp, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a56      	ldr	r2, [pc, #344]	; (80003c4 <main+0x268>)
 800026c:	2169      	movs	r1, #105	; 0x69
 800026e:	2005      	movs	r0, #5
 8000270:	f000 fc57 	bl	8000b22 <ST7735_WriteString>
			break;
 8000274:	e03b      	b.n	80002ee <main+0x192>
	case tue:ST7735_WriteString(5 ,105,"tuesday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 8000276:	4b50      	ldr	r3, [pc, #320]	; (80003b8 <main+0x25c>)
 8000278:	221f      	movs	r2, #31
 800027a:	9202      	str	r2, [sp, #8]
 800027c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000280:	9201      	str	r2, [sp, #4]
 8000282:	685a      	ldr	r2, [r3, #4]
 8000284:	9200      	str	r2, [sp, #0]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a4f      	ldr	r2, [pc, #316]	; (80003c8 <main+0x26c>)
 800028a:	2169      	movs	r1, #105	; 0x69
 800028c:	2005      	movs	r0, #5
 800028e:	f000 fc48 	bl	8000b22 <ST7735_WriteString>
			break;
 8000292:	e02c      	b.n	80002ee <main+0x192>
	case wend:ST7735_WriteString(5 ,105,"wendsday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 8000294:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <main+0x25c>)
 8000296:	221f      	movs	r2, #31
 8000298:	9202      	str	r2, [sp, #8]
 800029a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800029e:	9201      	str	r2, [sp, #4]
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	9200      	str	r2, [sp, #0]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a49      	ldr	r2, [pc, #292]	; (80003cc <main+0x270>)
 80002a8:	2169      	movs	r1, #105	; 0x69
 80002aa:	2005      	movs	r0, #5
 80002ac:	f000 fc39 	bl	8000b22 <ST7735_WriteString>
	case thurs:ST7735_WriteString(5 ,105,"thursday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 80002b0:	4b41      	ldr	r3, [pc, #260]	; (80003b8 <main+0x25c>)
 80002b2:	221f      	movs	r2, #31
 80002b4:	9202      	str	r2, [sp, #8]
 80002b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80002ba:	9201      	str	r2, [sp, #4]
 80002bc:	685a      	ldr	r2, [r3, #4]
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a43      	ldr	r2, [pc, #268]	; (80003d0 <main+0x274>)
 80002c4:	2169      	movs	r1, #105	; 0x69
 80002c6:	2005      	movs	r0, #5
 80002c8:	f000 fc2b 	bl	8000b22 <ST7735_WriteString>
			break;
 80002cc:	e00f      	b.n	80002ee <main+0x192>
	case fri:ST7735_WriteString(5 ,105,"friday" ,Font_11x18 ,ST7735_PURPLE,ST7735_YELLOW);
 80002ce:	4b3a      	ldr	r3, [pc, #232]	; (80003b8 <main+0x25c>)
 80002d0:	221f      	movs	r2, #31
 80002d2:	9202      	str	r2, [sp, #8]
 80002d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80002d8:	9201      	str	r2, [sp, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <main+0x278>)
 80002e2:	2169      	movs	r1, #105	; 0x69
 80002e4:	2005      	movs	r0, #5
 80002e6:	f000 fc1c 	bl	8000b22 <ST7735_WriteString>
			break;
 80002ea:	e000      	b.n	80002ee <main+0x192>
	default:
			break;
 80002ec:	bf00      	nop
	}
	switch (sDate.Month) {
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <main+0x24c>)
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	2b0b      	cmp	r3, #11
 80002f6:	f200 8087 	bhi.w	8000408 <main+0x2ac>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <main+0x1a4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000331 	.word	0x08000331
 8000304:	0800033b 	.word	0x0800033b
 8000308:	08000345 	.word	0x08000345
 800030c:	0800034f 	.word	0x0800034f
 8000310:	08000359 	.word	0x08000359
 8000314:	08000363 	.word	0x08000363
 8000318:	0800036d 	.word	0x0800036d
 800031c:	08000377 	.word	0x08000377
 8000320:	08000381 	.word	0x08000381
 8000324:	0800038b 	.word	0x0800038b
 8000328:	08000395 	.word	0x08000395
 800032c:	0800039f 	.word	0x0800039f
	        case jan:
	            strcpy(sum, "JAN");
 8000330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000334:	4a28      	ldr	r2, [pc, #160]	; (80003d8 <main+0x27c>)
 8000336:	601a      	str	r2, [r3, #0]
	            break;
 8000338:	e067      	b.n	800040a <main+0x2ae>
	        case feb:
	            strcpy(sum, "FEB");
 800033a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800033e:	4a27      	ldr	r2, [pc, #156]	; (80003dc <main+0x280>)
 8000340:	601a      	str	r2, [r3, #0]
	            break;
 8000342:	e062      	b.n	800040a <main+0x2ae>
	        case mar:
	            strcpy(sum, "MAR");
 8000344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000348:	4a25      	ldr	r2, [pc, #148]	; (80003e0 <main+0x284>)
 800034a:	601a      	str	r2, [r3, #0]
	            break;
 800034c:	e05d      	b.n	800040a <main+0x2ae>
	        case april:
	            strcpy(sum, "APR");
 800034e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000352:	4a24      	ldr	r2, [pc, #144]	; (80003e4 <main+0x288>)
 8000354:	601a      	str	r2, [r3, #0]
	            break;
 8000356:	e058      	b.n	800040a <main+0x2ae>
	        case may:
	            strcpy(sum, "MAY");
 8000358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800035c:	4a22      	ldr	r2, [pc, #136]	; (80003e8 <main+0x28c>)
 800035e:	601a      	str	r2, [r3, #0]
	            break;
 8000360:	e053      	b.n	800040a <main+0x2ae>
	        case june:
	            strcpy(sum, "JUN");
 8000362:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <main+0x290>)
 8000368:	601a      	str	r2, [r3, #0]
	            break;
 800036a:	e04e      	b.n	800040a <main+0x2ae>
	        case july:
	            strcpy(sum, "JUL");
 800036c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <main+0x294>)
 8000372:	601a      	str	r2, [r3, #0]
	            break;
 8000374:	e049      	b.n	800040a <main+0x2ae>
	        case aug:
	            strcpy(sum, "AUG");
 8000376:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <main+0x298>)
 800037c:	601a      	str	r2, [r3, #0]
	            break;
 800037e:	e044      	b.n	800040a <main+0x2ae>
	        case sept:
	            strcpy(sum, "SEP");
 8000380:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000384:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <main+0x29c>)
 8000386:	601a      	str	r2, [r3, #0]
	            break;
 8000388:	e03f      	b.n	800040a <main+0x2ae>
	        case oct:
	            strcpy(sum, "OCT");
 800038a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <main+0x2a0>)
 8000390:	601a      	str	r2, [r3, #0]
	            break;
 8000392:	e03a      	b.n	800040a <main+0x2ae>
	        case nov:
	            strcpy(sum, "NOV");
 8000394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000398:	4a19      	ldr	r2, [pc, #100]	; (8000400 <main+0x2a4>)
 800039a:	601a      	str	r2, [r3, #0]
	            break;
 800039c:	e035      	b.n	800040a <main+0x2ae>
	        case dec:
	            strcpy(sum, "DEC");
 800039e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003a2:	4a18      	ldr	r2, [pc, #96]	; (8000404 <main+0x2a8>)
 80003a4:	601a      	str	r2, [r3, #0]
	            break;
 80003a6:	e030      	b.n	800040a <main+0x2ae>
 80003a8:	2000008c 	.word	0x2000008c
 80003ac:	20000090 	.word	0x20000090
 80003b0:	20000000 	.word	0x20000000
 80003b4:	080039bc 	.word	0x080039bc
 80003b8:	20000008 	.word	0x20000008
 80003bc:	080039cc 	.word	0x080039cc
 80003c0:	080039d8 	.word	0x080039d8
 80003c4:	080039e0 	.word	0x080039e0
 80003c8:	080039e8 	.word	0x080039e8
 80003cc:	080039f0 	.word	0x080039f0
 80003d0:	080039fc 	.word	0x080039fc
 80003d4:	08003a08 	.word	0x08003a08
 80003d8:	004e414a 	.word	0x004e414a
 80003dc:	00424546 	.word	0x00424546
 80003e0:	0052414d 	.word	0x0052414d
 80003e4:	00525041 	.word	0x00525041
 80003e8:	0059414d 	.word	0x0059414d
 80003ec:	004e554a 	.word	0x004e554a
 80003f0:	004c554a 	.word	0x004c554a
 80003f4:	00475541 	.word	0x00475541
 80003f8:	00504553 	.word	0x00504553
 80003fc:	0054434f 	.word	0x0054434f
 8000400:	00564f4e 	.word	0x00564f4e
 8000404:	00434544 	.word	0x00434544
	        default:
	            break;
 8000408:	bf00      	nop
	    }
	 bucket = yearline + strlen(yearline);
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fe9c 	bl	800014c <strlen>
 8000414:	4602      	mov	r2, r0
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	4413      	add	r3, r2
 800041c:	64fb      	str	r3, [r7, #76]	; 0x4c
	 sprintf(buffer, "%02d", sDate.Date);
 800041e:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <main+0x45c>)
 8000420:	789b      	ldrb	r3, [r3, #2]
 8000422:	461a      	mov	r2, r3
 8000424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000428:	4964      	ldr	r1, [pc, #400]	; (80005bc <main+0x460>)
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fea4 	bl	8003178 <siprintf>
				  strcat(bucket, buffer);
 8000430:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000434:	4619      	mov	r1, r3
 8000436:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000438:	f002 fec6 	bl	80031c8 <strcat>
				  strcat(bucket, " ");
 800043c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800043e:	f7ff fe85 	bl	800014c <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000448:	4413      	add	r3, r2
 800044a:	495d      	ldr	r1, [pc, #372]	; (80005c0 <main+0x464>)
 800044c:	461a      	mov	r2, r3
 800044e:	460b      	mov	r3, r1
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	8013      	strh	r3, [r2, #0]
				  strcat(bucket,sum);
 8000454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000458:	4619      	mov	r1, r3
 800045a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800045c:	f002 feb4 	bl	80031c8 <strcat>
				  strcat(bucket, " ");
 8000460:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000462:	f7ff fe73 	bl	800014c <strlen>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800046c:	4413      	add	r3, r2
 800046e:	4954      	ldr	r1, [pc, #336]	; (80005c0 <main+0x464>)
 8000470:	461a      	mov	r2, r3
 8000472:	460b      	mov	r3, r1
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	8013      	strh	r3, [r2, #0]
				  strcat(bucket, "20");
 8000478:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800047a:	f7ff fe67 	bl	800014c <strlen>
 800047e:	4603      	mov	r3, r0
 8000480:	461a      	mov	r2, r3
 8000482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000484:	4413      	add	r3, r2
 8000486:	4a4f      	ldr	r2, [pc, #316]	; (80005c4 <main+0x468>)
 8000488:	8811      	ldrh	r1, [r2, #0]
 800048a:	7892      	ldrb	r2, [r2, #2]
 800048c:	8019      	strh	r1, [r3, #0]
 800048e:	709a      	strb	r2, [r3, #2]
				  sprintf(buffer, "%02d", sDate.Year);
 8000490:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <main+0x45c>)
 8000492:	78db      	ldrb	r3, [r3, #3]
 8000494:	461a      	mov	r2, r3
 8000496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800049a:	4948      	ldr	r1, [pc, #288]	; (80005bc <main+0x460>)
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fe6b 	bl	8003178 <siprintf>
				  strcat(bucket, buffer);
 80004a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004a6:	4619      	mov	r1, r3
 80004a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80004aa:	f002 fe8d 	bl	80031c8 <strcat>
				  ST7735_WriteString(5 ,45,yearline ,Font_11x18 ,ST7735_BLUE,ST7735_YELLOW);
 80004ae:	4b46      	ldr	r3, [pc, #280]	; (80005c8 <main+0x46c>)
 80004b0:	f107 0118 	add.w	r1, r7, #24
 80004b4:	221f      	movs	r2, #31
 80004b6:	9202      	str	r2, [sp, #8]
 80004b8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	685a      	ldr	r2, [r3, #4]
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	460a      	mov	r2, r1
 80004c6:	212d      	movs	r1, #45	; 0x2d
 80004c8:	2005      	movs	r0, #5
 80004ca:	f000 fb2a 	bl	8000b22 <ST7735_WriteString>
	while (1) {
		char timeline[20]="";
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
			  HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 80004e0:	2200      	movs	r2, #0
 80004e2:	4935      	ldr	r1, [pc, #212]	; (80005b8 <main+0x45c>)
 80004e4:	4839      	ldr	r0, [pc, #228]	; (80005cc <main+0x470>)
 80004e6:	f002 f837 	bl	8002558 <HAL_RTC_GetDate>
			  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 80004ea:	2200      	movs	r2, #0
 80004ec:	4938      	ldr	r1, [pc, #224]	; (80005d0 <main+0x474>)
 80004ee:	4837      	ldr	r0, [pc, #220]	; (80005cc <main+0x470>)
 80004f0:	f001 fea4 	bl	800223c <HAL_RTC_GetTime>

			   bucket = timeline + strlen(timeline); // Pointing bucket to the end of prefix
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fe28 	bl	800014c <strlen>
 80004fc:	4602      	mov	r2, r0
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4413      	add	r3, r2
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
			  // Assuming time/date components can be represented within 10 characters
			  // Convert time components to strings

			  sprintf(buffer, "%02d", sTime.Hours);
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <main+0x474>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800050e:	492b      	ldr	r1, [pc, #172]	; (80005bc <main+0x460>)
 8000510:	4618      	mov	r0, r3
 8000512:	f002 fe31 	bl	8003178 <siprintf>
			  strcat(bucket, buffer);
 8000516:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800051a:	4619      	mov	r1, r3
 800051c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800051e:	f002 fe53 	bl	80031c8 <strcat>
			  strcat(bucket, ":");
 8000522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000524:	f7ff fe12 	bl	800014c <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800052e:	4413      	add	r3, r2
 8000530:	4928      	ldr	r1, [pc, #160]	; (80005d4 <main+0x478>)
 8000532:	461a      	mov	r2, r3
 8000534:	460b      	mov	r3, r1
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	8013      	strh	r3, [r2, #0]
			  sprintf(buffer, "%02d", sTime.Minutes);
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <main+0x474>)
 800053c:	785b      	ldrb	r3, [r3, #1]
 800053e:	461a      	mov	r2, r3
 8000540:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000544:	491d      	ldr	r1, [pc, #116]	; (80005bc <main+0x460>)
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fe16 	bl	8003178 <siprintf>
			  strcat(bucket, buffer);
 800054c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000550:	4619      	mov	r1, r3
 8000552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000554:	f002 fe38 	bl	80031c8 <strcat>
			  strcat(bucket, ":");
 8000558:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800055a:	f7ff fdf7 	bl	800014c <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000564:	4413      	add	r3, r2
 8000566:	491b      	ldr	r1, [pc, #108]	; (80005d4 <main+0x478>)
 8000568:	461a      	mov	r2, r3
 800056a:	460b      	mov	r3, r1
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	8013      	strh	r3, [r2, #0]
			  sprintf(buffer, "%02d", sTime.Seconds);
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <main+0x474>)
 8000572:	789b      	ldrb	r3, [r3, #2]
 8000574:	461a      	mov	r2, r3
 8000576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800057a:	4910      	ldr	r1, [pc, #64]	; (80005bc <main+0x460>)
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fdfb 	bl	8003178 <siprintf>
			  strcat(bucket, buffer);
 8000582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000586:	4619      	mov	r1, r3
 8000588:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800058a:	f002 fe1d 	bl	80031c8 <strcat>
			 ST7735_WriteString(5 ,80,timeline ,Font_11x18 ,ST7735_BROWN,ST7735_YELLOW);
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <main+0x46c>)
 8000590:	1d39      	adds	r1, r7, #4
 8000592:	221f      	movs	r2, #31
 8000594:	9202      	str	r2, [sp, #8]
 8000596:	f24a 1245 	movw	r2, #41285	; 0xa145
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	460a      	mov	r2, r1
 80005a4:	2150      	movs	r1, #80	; 0x50
 80005a6:	2005      	movs	r0, #5
 80005a8:	f000 fabb 	bl	8000b22 <ST7735_WriteString>

			  /***************/



			  HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 fd08 	bl	8000fc4 <HAL_Delay>
	while (1) {
 80005b4:	e78b      	b.n	80004ce <main+0x372>
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	08003a10 	.word	0x08003a10
 80005c0:	08003a18 	.word	0x08003a18
 80005c4:	08003a1c 	.word	0x08003a1c
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000090 	.word	0x20000090
 80005d0:	20000088 	.word	0x20000088
 80005d4:	08003a20 	.word	0x08003a20

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e2:	2228      	movs	r2, #40	; 0x28
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fde6 	bl	80031b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000608:	2309      	movs	r3, #9
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000628:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ff76 	bl	8001524 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800063e:	f000 f8f7 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f9e2 	bl	8001a28 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 f8e1 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800066e:	2301      	movs	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb4e 	bl	8001d1c <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000686:	f000 f8d3 	bl	8000830 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2100      	movs	r1, #0
 800069e:	460a      	mov	r2, r1
 80006a0:	801a      	strh	r2, [r3, #0]
 80006a2:	460a      	mov	r2, r1
 80006a4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_RTC_Init+0x8c>)
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_RTC_Init+0x90>)
 80006ae:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_RTC_Init+0x8c>)
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295
 80006b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_RTC_Init+0x8c>)
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c0:	4817      	ldr	r0, [pc, #92]	; (8000720 <MX_RTC_Init+0x8c>)
 80006c2:	f001 fc97 	bl	8001ff4 <HAL_RTC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80006cc:	f000 f8b0 	bl	8000830 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006d8:	2300      	movs	r3, #0
 80006da:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <MX_RTC_Init+0x8c>)
 80006e4:	f001 fd12 	bl	800210c <HAL_RTC_SetTime>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80006ee:	f000 f89f 	bl	8000830 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006f2:	2302      	movs	r3, #2
 80006f4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 80006fe:	2324      	movs	r3, #36	; 0x24
 8000700:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_RTC_Init+0x8c>)
 800070a:	f001 fe6f 	bl	80023ec <HAL_RTC_SetDate>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000714:	f000 f88c 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000090 	.word	0x20000090
 8000724:	40002800 	.word	0x40002800

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_SPI1_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI1_Init+0x68>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_SPI1_Init+0x68>)
 800073c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000740:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI1_Init+0x68>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x68>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x68>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x68>)
 800075e:	2220      	movs	r2, #32
 8000760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI1_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI1_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x68>)
 8000776:	220a      	movs	r2, #10
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI1_Init+0x68>)
 800077c:	f002 f9e2 	bl	8002b44 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000786:	f000 f853 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000a4 	.word	0x200000a4
 8000794:	40013000 	.word	0x40013000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_GPIO_Init+0x90>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0x90>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0x90>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_GPIO_Init+0x90>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <MX_GPIO_Init+0x90>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0x94>)
 80007fc:	f000 fe6e 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000800:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x94>)
 800081a:	f000 fcdb 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40010c00 	.word	0x40010c00

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <ST7735_Select+0x14>)
 8000848:	f000 fe48 	bl	80014dc <HAL_GPIO_WritePin>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40010c00 	.word	0x40010c00

08000854 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	4802      	ldr	r0, [pc, #8]	; (8000868 <ST7735_Unselect+0x14>)
 8000860:	f000 fe3c 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40010c00 	.word	0x40010c00

0800086c <ST7735_Reset>:

static void ST7735_Reset() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <ST7735_Reset+0x28>)
 8000878:	f000 fe30 	bl	80014dc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800087c:	2005      	movs	r0, #5
 800087e:	f000 fba1 	bl	8000fc4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <ST7735_Reset+0x28>)
 800088a:	f000 fe27 	bl	80014dc <HAL_GPIO_WritePin>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00

08000898 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <ST7735_WriteCommand+0x2c>)
 80008aa:	f000 fe17 	bl	80014dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008ae:	1df9      	adds	r1, r7, #7
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	2201      	movs	r2, #1
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <ST7735_WriteCommand+0x30>)
 80008b8:	f002 f9c8 	bl	8002c4c <HAL_SPI_Transmit>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	200000a4 	.word	0x200000a4

080008cc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <ST7735_WriteData+0x30>)
 80008de:	f000 fdfd 	bl	80014dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <ST7735_WriteData+0x34>)
 80008ee:	f002 f9ad 	bl	8002c4c <HAL_SPI_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010c00 	.word	0x40010c00
 8000900:	200000a4 	.word	0x200000a4

08000904 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000916:	e034      	b.n	8000982 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffb7 	bl	8000898 <ST7735_WriteCommand>

        numArgs = *addr++;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000934:	7abb      	ldrb	r3, [r7, #10]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800093e:	7abb      	ldrb	r3, [r7, #10]
 8000940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000944:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000946:	7abb      	ldrb	r3, [r7, #10]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d008      	beq.n	800095e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800094c:	7abb      	ldrb	r3, [r7, #10]
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ffbb 	bl	80008cc <ST7735_WriteData>
            addr += numArgs;
 8000956:	7abb      	ldrb	r3, [r7, #10]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800095e:	89bb      	ldrh	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800096e:	89bb      	ldrh	r3, [r7, #12]
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d102      	bne.n	800097a <ST7735_ExecuteCommandList+0x76>
 8000974:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000978:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800097a:	89bb      	ldrh	r3, [r7, #12]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fb21 	bl	8000fc4 <HAL_Delay>
    while(numCommands--) {
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	73fa      	strb	r2, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1c5      	bne.n	8000918 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000996:	b590      	push	{r4, r7, lr}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	4604      	mov	r4, r0
 800099e:	4608      	mov	r0, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	461a      	mov	r2, r3
 80009a4:	4623      	mov	r3, r4
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4603      	mov	r3, r0
 80009aa:	71bb      	strb	r3, [r7, #6]
 80009ac:	460b      	mov	r3, r1
 80009ae:	717b      	strb	r3, [r7, #5]
 80009b0:	4613      	mov	r3, r2
 80009b2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80009b4:	202a      	movs	r0, #42	; 0x2a
 80009b6:	f7ff ff6f 	bl	8000898 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80009ba:	2300      	movs	r3, #0
 80009bc:	733b      	strb	r3, [r7, #12]
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	737b      	strb	r3, [r7, #13]
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]
 80009c6:	797b      	ldrb	r3, [r7, #5]
 80009c8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff7b 	bl	80008cc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80009d6:	202b      	movs	r0, #43	; 0x2b
 80009d8:	f7ff ff5e 	bl	8000898 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2104      	movs	r1, #4
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff6e 	bl	80008cc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80009f0:	202c      	movs	r0, #44	; 0x2c
 80009f2:	f7ff ff51 	bl	8000898 <ST7735_WriteCommand>
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}
	...

08000a00 <ST7735_Init>:

void ST7735_Init() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000a04:	f7ff ff1a 	bl	800083c <ST7735_Select>
    ST7735_Reset();
 8000a08:	f7ff ff30 	bl	800086c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <ST7735_Init+0x28>)
 8000a0e:	f7ff ff79 	bl	8000904 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <ST7735_Init+0x2c>)
 8000a14:	f7ff ff76 	bl	8000904 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <ST7735_Init+0x30>)
 8000a1a:	f7ff ff73 	bl	8000904 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000a1e:	f7ff ff19 	bl	8000854 <ST7735_Unselect>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08004eec 	.word	0x08004eec
 8000a2c:	08004f28 	.word	0x08004f28
 8000a30:	08004f38 	.word	0x08004f38

08000a34 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a34:	b082      	sub	sp, #8
 8000a36:	b590      	push	{r4, r7, lr}
 8000a38:	b089      	sub	sp, #36	; 0x24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	460b      	mov	r3, r1
 8000a44:	80bb      	strh	r3, [r7, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	b2d8      	uxtb	r0, r3
 8000a4e:	88bb      	ldrh	r3, [r7, #4]
 8000a50:	b2d9      	uxtb	r1, r3
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b2dc      	uxtb	r4, r3
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4622      	mov	r2, r4
 8000a74:	f7ff ff8f 	bl	8000996 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	e043      	b.n	8000b06 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	3b20      	subs	r3, #32
 8000a84:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a88:	fb01 f303 	mul.w	r3, r1, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	440b      	add	r3, r1
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	e029      	b.n	8000af4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00e      	beq.n	8000ace <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000ab0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	743b      	strb	r3, [r7, #16]
 8000aba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff00 	bl	80008cc <ST7735_WriteData>
 8000acc:	e00f      	b.n	8000aee <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000ace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	733b      	strb	r3, [r7, #12]
 8000ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff feef 	bl	80008cc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000af8:	461a      	mov	r2, r3
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d3cf      	bcc.n	8000aa0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	3301      	adds	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d3b5      	bcc.n	8000a7e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b1e:	b002      	add	sp, #8
 8000b20:	4770      	bx	lr

08000b22 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b22:	b082      	sub	sp, #8
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	603a      	str	r2, [r7, #0]
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	460b      	mov	r3, r1
 8000b34:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b36:	f7ff fe81 	bl	800083c <ST7735_Select>

    while(*str) {
 8000b3a:	e02d      	b.n	8000b98 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	7d3a      	ldrb	r2, [r7, #20]
 8000b40:	4413      	add	r3, r2
 8000b42:	2b7f      	cmp	r3, #127	; 0x7f
 8000b44:	dd13      	ble.n	8000b6e <ST7735_WriteString+0x4c>
            x = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b4a:	7d7b      	ldrb	r3, [r7, #21]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	7d7a      	ldrb	r2, [r7, #21]
 8000b58:	4413      	add	r3, r2
 8000b5a:	2b9f      	cmp	r3, #159	; 0x9f
 8000b5c:	dc21      	bgt.n	8000ba2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b20      	cmp	r3, #32
 8000b64:	d103      	bne.n	8000b6e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	603b      	str	r3, [r7, #0]
                continue;
 8000b6c:	e014      	b.n	8000b98 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	8c3b      	ldrh	r3, [r7, #32]
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	8bbb      	ldrh	r3, [r7, #28]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f7ff ff56 	bl	8000a34 <ST7735_WriteChar>
        x += font.width;
 8000b88:	7d3b      	ldrb	r3, [r7, #20]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	4413      	add	r3, r2
 8000b90:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1cd      	bne.n	8000b3c <ST7735_WriteString+0x1a>
 8000ba0:	e000      	b.n	8000ba4 <ST7735_WriteString+0x82>
                break;
 8000ba2:	bf00      	nop
    }

    ST7735_Unselect();
 8000ba4:	f7ff fe56 	bl	8000854 <ST7735_Unselect>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb2:	b002      	add	sp, #8
 8000bb4:	4770      	bx	lr
	...

08000bb8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4623      	mov	r3, r4
 8000bc8:	80fb      	strh	r3, [r7, #6]
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80bb      	strh	r3, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	807b      	strh	r3, [r7, #2]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bda:	d858      	bhi.n	8000c8e <ST7735_FillRectangle+0xd6>
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	2b9f      	cmp	r3, #159	; 0x9f
 8000be0:	d855      	bhi.n	8000c8e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	4413      	add	r3, r2
 8000be8:	2b80      	cmp	r3, #128	; 0x80
 8000bea:	dd03      	ble.n	8000bf4 <ST7735_FillRectangle+0x3c>
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000bf2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000bf4:	88ba      	ldrh	r2, [r7, #4]
 8000bf6:	883b      	ldrh	r3, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2ba0      	cmp	r3, #160	; 0xa0
 8000bfc:	dd03      	ble.n	8000c06 <ST7735_FillRectangle+0x4e>
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000c04:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c06:	f7ff fe19 	bl	800083c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	b2d8      	uxtb	r0, r3
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	b2d9      	uxtb	r1, r3
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b2dc      	uxtb	r4, r3
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	883b      	ldrh	r3, [r7, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4622      	mov	r2, r4
 8000c34:	f7ff feaf 	bl	8000996 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c38:	8c3b      	ldrh	r3, [r7, #32]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	733b      	strb	r3, [r7, #12]
 8000c42:	8c3b      	ldrh	r3, [r7, #32]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <ST7735_FillRectangle+0xe0>)
 8000c50:	f000 fc44 	bl	80014dc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	80bb      	strh	r3, [r7, #4]
 8000c58:	e013      	b.n	8000c82 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	e00a      	b.n	8000c76 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	2202      	movs	r2, #2
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <ST7735_FillRectangle+0xe4>)
 8000c6c:	f001 ffee 	bl	8002c4c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f1      	bne.n	8000c60 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000c7c:	88bb      	ldrh	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	80bb      	strh	r3, [r7, #4]
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e8      	bne.n	8000c5a <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000c88:	f7ff fde4 	bl	8000854 <ST7735_Unselect>
 8000c8c:	e000      	b.n	8000c90 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c8e:	bf00      	nop
}
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	200000a4 	.word	0x200000a4

08000ca0 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	23a0      	movs	r3, #160	; 0xa0
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff ff7f 	bl	8000bb8 <ST7735_FillRectangle>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_RTC_MspInit+0x3c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d110      	bne.n	8000d5c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d3a:	f000 fbe7 	bl	800150c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_RTC_MspInit+0x40>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_RTC_MspInit+0x40>)
 8000d44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_RTC_MspInit+0x40>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_RTC_MspInit+0x44>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40002800 	.word	0x40002800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	4242043c 	.word	0x4242043c

08000d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_SPI_MspInit+0x70>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x78>)
 8000dd4:	f000 f9fe 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f8ab 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f002 f9cc 	bl	8003208 <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20005000 	.word	0x20005000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	200000fc 	.word	0x200000fc
 8000ea4:	20000250 	.word	0x20000250

08000ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb4:	f7ff fff8 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eba:	490c      	ldr	r1, [pc, #48]	; (8000eec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ed0:	4c09      	ldr	r4, [pc, #36]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f002 f999 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee2:	f7ff f93b 	bl	800015c <main>
  bx lr
 8000ee6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ef0:	08004fe0 	.word	0x08004fe0
  ldr r2, =_sbss
 8000ef4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ef8:	2000024c 	.word	0x2000024c

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x28>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f92b 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fed2 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f935 	bl	80011ba <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f90b 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000010 	.word	0x20000010
 8000f84:	20000018 	.word	0x20000018
 8000f88:	20000014 	.word	0x20000014

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <HAL_IncTick+0x20>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000018 	.word	0x20000018
 8000fac:	20000100 	.word	0x20000100

08000fb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000100 	.word	0x20000100

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffe0 	bl	8000fb0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000018 	.word	0x20000018

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff49 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb0 	bl	8001128 <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	; 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e169      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8158 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a9a      	ldr	r2, [pc, #616]	; (8001474 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d05e      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001210:	4a98      	ldr	r2, [pc, #608]	; (8001474 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d875      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001216:	4a98      	ldr	r2, [pc, #608]	; (8001478 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d058      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 800121c:	4a96      	ldr	r2, [pc, #600]	; (8001478 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d86f      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001222:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_GPIO_Init+0x2a8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d052      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001228:	4a94      	ldr	r2, [pc, #592]	; (800147c <HAL_GPIO_Init+0x2a8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d869      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800122e:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_GPIO_Init+0x2ac>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04c      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001234:	4a92      	ldr	r2, [pc, #584]	; (8001480 <HAL_GPIO_Init+0x2ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d863      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800123a:	4a92      	ldr	r2, [pc, #584]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d046      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001240:	4a90      	ldr	r2, [pc, #576]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d85d      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d82a      	bhi.n	80012a0 <HAL_GPIO_Init+0xcc>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d859      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <HAL_GPIO_Init+0x80>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012bb 	.word	0x080012bb
 8001260:	080012fd 	.word	0x080012fd
 8001264:	08001303 	.word	0x08001303
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	08001303 	.word	0x08001303
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	4a79      	ldr	r2, [pc, #484]	; (8001488 <HAL_GPIO_Init+0x2b4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e029      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e024      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01f      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e01a      	b.n	8001304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e013      	b.n	8001304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e009      	b.n	8001304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x130>
          break;
 8001302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2bff      	cmp	r3, #255	; 0xff
 8001308:	d801      	bhi.n	800130e <HAL_GPIO_Init+0x13a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_Init+0x13e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d802      	bhi.n	8001320 <HAL_GPIO_Init+0x14c>
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x152>
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	3b08      	subs	r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	210f      	movs	r1, #15
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80b1 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_GPIO_Init+0x2b8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_GPIO_Init+0x2b8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2bc>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_GPIO_Init+0x2c0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <HAL_GPIO_Init+0x2c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	; (800149c <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1e0>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d2:	492f      	ldr	r1, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x2bc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	492c      	ldr	r1, [pc, #176]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	4928      	ldr	r1, [pc, #160]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	491e      	ldr	r1, [pc, #120]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4914      	ldr	r1, [pc, #80]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d021      	beq.n	80014a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x2e2>
 8001472:	bf00      	nop
 8001474:	10320000 	.word	0x10320000
 8001478:	10310000 	.word	0x10310000
 800147c:	10220000 	.word	0x10220000
 8001480:	10210000 	.word	0x10210000
 8001484:	10120000 	.word	0x10120000
 8001488:	10110000 	.word	0x10110000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae8e 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	372c      	adds	r7, #44	; 0x2c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	420e0020 	.word	0x420e0020

08001524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e272      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8087 	beq.w	8001652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d00c      	beq.n	800156a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001550:	4b8f      	ldr	r3, [pc, #572]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b08      	cmp	r3, #8
 800155a:	d112      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
 800155c:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d10b      	bne.n	8001582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d06c      	beq.n	8001650 <HAL_RCC_OscConfig+0x12c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d168      	bne.n	8001650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e24c      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x76>
 800158c:	4b80      	ldr	r3, [pc, #512]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a7f      	ldr	r2, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e02e      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4b7b      	ldr	r3, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a77      	ldr	r2, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0xbc>
 80015c6:	4b72      	ldr	r3, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a71      	ldr	r2, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6e      	ldr	r2, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xd4>
 80015e0:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6a      	ldr	r2, [pc, #424]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcd6 	bl	8000fb0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fcd2 	bl	8000fb0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e200      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xe4>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fcc2 	bl	8000fb0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fcbe 	bl	8000fb0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1ec      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x10c>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1c0      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4939      	ldr	r1, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fc77 	bl	8000fb0 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc73 	bl	8000fb0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1a1      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4927      	ldr	r1, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc56 	bl	8000fb0 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fc52 	bl	8000fb0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e180      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03a      	beq.n	80017a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d019      	beq.n	800176e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fc36 	bl	8000fb0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc32 	bl	8000fb0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e160      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_RCC_OscConfig+0x26c>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 faba 	bl	8001ce0 <RCC_Delay>
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fc1c 	bl	8000fb0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177a:	e00f      	b.n	800179c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fc18 	bl	8000fb0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d908      	bls.n	800179c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e146      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	42420000 	.word	0x42420000
 8001798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e9      	bne.n	800177c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a6 	beq.w	8001902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a87      	ldr	r2, [pc, #540]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b82      	ldr	r3, [pc, #520]	; (80019ec <HAL_RCC_OscConfig+0x4c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x4c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7e      	ldr	r2, [pc, #504]	; (80019ec <HAL_RCC_OscConfig+0x4c8>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fbd9 	bl	8000fb0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fbd5 	bl	8000fb0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e103      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x4c8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x312>
 8001828:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a6e      	ldr	r2, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e02d      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x334>
 800183e:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a66      	ldr	r2, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	e01c      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x356>
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e00b      	b.n	8001892 <HAL_RCC_OscConfig+0x36e>
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb89 	bl	8000fb0 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff fb85 	bl	8000fb0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0b1      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0ee      	beq.n	80018a2 <HAL_RCC_OscConfig+0x37e>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fb73 	bl	8000fb0 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff fb6f 	bl	8000fb0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e09b      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8087 	beq.w	8001a1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d061      	beq.n	80019dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d146      	bne.n	80019ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fb43 	bl	8000fb0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fb3f 	bl	8000fb0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e06d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4921      	ldr	r1, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a19      	ldr	r1, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	430b      	orrs	r3, r1
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fb13 	bl	8000fb0 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fb0f 	bl	8000fb0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e03d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x46a>
 80019ac:	e035      	b.n	8001a1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_RCC_OscConfig+0x4cc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fafc 	bl	8000fb0 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff faf8 	bl	8000fb0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e026      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x498>
 80019da:	e01e      	b.n	8001a1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e019      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40007000 	.word	0x40007000
 80019f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x500>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0d0      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 0207 	bic.w	r2, r3, #7
 8001a52:	4965      	ldr	r1, [pc, #404]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0b8      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	494d      	ldr	r1, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d040      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d115      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e07f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e073      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06b      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4936      	ldr	r1, [pc, #216]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fa4a 	bl	8000fb0 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fa46 	bl	8000fb0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e053      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d210      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4922      	ldr	r1, [pc, #136]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e032      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4916      	ldr	r1, [pc, #88]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb6:	f000 f821 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	490a      	ldr	r1, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f9a8 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08004f64 	.word	0x08004f64
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	20000014 	.word	0x20000014

08001bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x30>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x36>
 8001c2a:	e027      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2e:	613b      	str	r3, [r7, #16]
      break;
 8001c30:	e027      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d010      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0c5b      	lsrs	r3, r3, #17
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5e:	fb03 f202 	mul.w	r2, r3, r2
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	613b      	str	r3, [r7, #16]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7e:	613b      	str	r3, [r7, #16]
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	693b      	ldr	r3, [r7, #16]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	007a1200 	.word	0x007a1200
 8001c98:	08004f7c 	.word	0x08004f7c
 8001c9c:	08004f8c 	.word	0x08004f8c
 8001ca0:	003d0900 	.word	0x003d0900

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff fff2 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0adb      	lsrs	r3, r3, #11
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08004f74 	.word	0x08004f74

08001ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <RCC_Delay+0x34>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <RCC_Delay+0x38>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	0a5b      	lsrs	r3, r3, #9
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cfc:	bf00      	nop
  }
  while (Delay --);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	60fa      	str	r2, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f9      	bne.n	8001cfc <RCC_Delay+0x1c>
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000010 	.word	0x20000010
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d07d      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d118      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a42      	ldr	r2, [pc, #264]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f918 	bl	8000fb0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	e008      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d84:	f7ff f914 	bl	8000fb0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e06d      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02e      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d027      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dd6:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff f8e3 	bl	8000fb0 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f8df 	bl	8000fb0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e036      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ee      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4917      	ldr	r1, [pc, #92]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	490b      	ldr	r1, [pc, #44]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420440 	.word	0x42420440

08001e88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	f200 808a 	bhi.w	8001fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d045      	beq.n	8001f44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d075      	beq.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001ebe:	e082      	b.n	8001fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d07b      	beq.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4a41      	ldr	r2, [pc, #260]	; (8001fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0c5b      	lsrs	r3, r3, #17
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f04:	4a38      	ldr	r2, [pc, #224]	; (8001fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e004      	b.n	8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4a34      	ldr	r2, [pc, #208]	; (8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	61bb      	str	r3, [r7, #24]
      break;
 8001f32:	e04a      	b.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
      break;
 8001f42:	e042      	b.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f54:	d108      	bne.n	8001f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e01f      	b.n	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f72:	d109      	bne.n	8001f88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001f80:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f92:	d11c      	bne.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d016      	beq.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001fa0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001fa4:	61bb      	str	r3, [r7, #24]
      break;
 8001fa6:	e012      	b.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fa8:	e011      	b.n	8001fce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001faa:	f7ff fe85 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	0b9b      	lsrs	r3, r3, #14
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	61bb      	str	r3, [r7, #24]
      break;
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fce:	bf00      	nop
    }
  }
  return (frequency);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08004f90 	.word	0x08004f90
 8001fe4:	08004fa0 	.word	0x08004fa0
 8001fe8:	007a1200 	.word	0x007a1200
 8001fec:	003d0900 	.word	0x003d0900
 8001ff0:	aaaaaaab 	.word	0xaaaaaaab

08001ff4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07a      	b.n	8002100 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7c5b      	ldrb	r3, [r3, #17]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fe84 	bl	8000d28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 faea 	bl	8002600 <HAL_RTC_WaitForSynchro>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e061      	b.n	8002100 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fba3 	bl	8002788 <RTC_EnterInitMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e056      	b.n	8002100 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0207 	bic.w	r2, r2, #7
 8002060:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RTC_Init+0x114>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_RTC_Init+0x114>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RTC_Init+0x114>)
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4921      	ldr	r1, [pc, #132]	; (8002108 <HAL_RTC_Init+0x114>)
 8002084:	4313      	orrs	r3, r2
 8002086:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d003      	beq.n	800209a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e00e      	b.n	80020b8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fef4 	bl	8001e88 <HAL_RCCEx_GetPeriphCLKFreq>
 80020a0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d104      	bne.n	80020b2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2204      	movs	r2, #4
 80020ac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e026      	b.n	8002100 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	0c1a      	lsrs	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 020f 	and.w	r2, r2, #15
 80020c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	b292      	uxth	r2, r2
 80020ce:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb81 	bl	80027d8 <RTC_ExitInitMode>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2204      	movs	r2, #4
 80020e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00c      	b.n	8002100 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80020fe:	2300      	movs	r3, #0
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40006c00 	.word	0x40006c00

0800210c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RTC_SetTime+0x20>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e080      	b.n	8002232 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	7c1b      	ldrb	r3, [r3, #16]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RTC_SetTime+0x30>
 8002138:	2302      	movs	r3, #2
 800213a:	e07a      	b.n	8002232 <HAL_RTC_SetTime+0x126>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2202      	movs	r2, #2
 8002146:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d113      	bne.n	8002176 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002158:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	4619      	mov	r1, r3
 8002162:	460b      	mov	r3, r1
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800216a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e01e      	b.n	80021b4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fb71 	bl	8002862 <RTC_Bcd2ToByte>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002188:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fb66 	bl	8002862 <RTC_Bcd2ToByte>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80021a2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fb5a 	bl	8002862 <RTC_Bcd2ToByte>
 80021ae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80021b0:	4423      	add	r3, r4
 80021b2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80021b4:	6979      	ldr	r1, [r7, #20]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa7f 	bl	80026ba <RTC_WriteTimeCounter>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2204      	movs	r2, #4
 80021c6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e02f      	b.n	8002232 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0205 	bic.w	r2, r2, #5
 80021e0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fa90 	bl	8002708 <RTC_ReadAlarmCounter>
 80021e8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d018      	beq.n	8002224 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002200:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002204:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002206:	6939      	ldr	r1, [r7, #16]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa96 	bl	800273a <RTC_WriteAlarmCounter>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2204      	movs	r2, #4
 8002218:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e006      	b.n	8002232 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
	...

0800223c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_RTC_GetTime+0x28>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b5      	b.n	80023d4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0ac      	b.n	80023d4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f9ed 	bl	800265a <RTC_ReadTimeCounter>
 8002280:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4a55      	ldr	r2, [pc, #340]	; (80023dc <HAL_RTC_GetTime+0x1a0>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0adb      	lsrs	r3, r3, #11
 800228c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <HAL_RTC_GetTime+0x1a0>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	0adb      	lsrs	r3, r3, #11
 8002298:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_RTC_GetTime+0x1a4>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_RTC_GetTime+0x1a0>)
 80022b4:	fba2 1203 	umull	r1, r2, r2, r3
 80022b8:	0ad2      	lsrs	r2, r2, #11
 80022ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80022be:	fb01 f202 	mul.w	r2, r1, r2
 80022c2:	1a9a      	subs	r2, r3, r2
 80022c4:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_RTC_GetTime+0x1a4>)
 80022c6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ca:	0959      	lsrs	r1, r3, #5
 80022cc:	460b      	mov	r3, r1
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a5b      	subs	r3, r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	1ad1      	subs	r1, r2, r3
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b17      	cmp	r3, #23
 80022e0:	d955      	bls.n	800238e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4a3f      	ldr	r2, [pc, #252]	; (80023e4 <HAL_RTC_GetTime+0x1a8>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_RTC_GetTime+0x1a8>)
 80022f2:	fba3 2301 	umull	r2, r3, r3, r1
 80022f6:	091a      	lsrs	r2, r3, #4
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1aca      	subs	r2, r1, r3
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f9fd 	bl	8002708 <RTC_ReadAlarmCounter>
 800230e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d008      	beq.n	800232a <HAL_RTC_GetTime+0xee>
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d904      	bls.n	800232a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	e002      	b.n	8002330 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4a2d      	ldr	r2, [pc, #180]	; (80023e8 <HAL_RTC_GetTime+0x1ac>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f9ba 	bl	80026ba <RTC_WriteTimeCounter>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e041      	b.n	80023d4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d00c      	beq.n	8002372 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002360:	69f9      	ldr	r1, [r7, #28]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f9e9 	bl	800273a <RTC_WriteAlarmCounter>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e030      	b.n	80023d4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002372:	69f9      	ldr	r1, [r7, #28]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f9e0 	bl	800273a <RTC_WriteAlarmCounter>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e027      	b.n	80023d4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa88 	bl	800289c <RTC_DateUpdate>
 800238c:	e003      	b.n	8002396 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01a      	beq.n	80023d2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa41 	bl	8002828 <RTC_ByteToBcd2>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fa38 	bl	8002828 <RTC_ByteToBcd2>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fa2f 	bl	8002828 <RTC_ByteToBcd2>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	91a2b3c5 	.word	0x91a2b3c5
 80023e0:	88888889 	.word	0x88888889
 80023e4:	aaaaaaab 	.word	0xaaaaaaab
 80023e8:	00015180 	.word	0x00015180

080023ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RTC_SetDate+0x24>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e097      	b.n	8002544 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	7c1b      	ldrb	r3, [r3, #16]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RTC_SetDate+0x34>
 800241c:	2302      	movs	r3, #2
 800241e:	e091      	b.n	8002544 <HAL_RTC_SetDate+0x158>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	78da      	ldrb	r2, [r3, #3]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785a      	ldrb	r2, [r3, #1]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	789a      	ldrb	r2, [r3, #2]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	739a      	strb	r2, [r3, #14]
 800244a:	e01a      	b.n	8002482 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa06 	bl	8002862 <RTC_Bcd2ToByte>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9fd 	bl	8002862 <RTC_Bcd2ToByte>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f9f4 	bl	8002862 <RTC_Bcd2ToByte>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	7bdb      	ldrb	r3, [r3, #15]
 8002486:	4618      	mov	r0, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	7b59      	ldrb	r1, [r3, #13]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	7b9b      	ldrb	r3, [r3, #14]
 8002490:	461a      	mov	r2, r3
 8002492:	f000 fadf 	bl	8002a54 <RTC_WeekDayNum>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	7b1a      	ldrb	r2, [r3, #12]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8d7 	bl	800265a <RTC_ReadTimeCounter>
 80024ac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_RTC_SetDate+0x160>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b18      	cmp	r3, #24
 80024be:	d93a      	bls.n	8002536 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_RTC_SetDate+0x164>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_RTC_SetDate+0x168>)
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024d6:	69f9      	ldr	r1, [r7, #28]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f8ee 	bl	80026ba <RTC_WriteTimeCounter>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2204      	movs	r2, #4
 80024e8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e027      	b.n	8002544 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f907 	bl	8002708 <RTC_ReadAlarmCounter>
 80024fa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d018      	beq.n	8002536 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d214      	bcs.n	8002536 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002512:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002516:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002518:	69b9      	ldr	r1, [r7, #24]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f90d 	bl	800273a <RTC_WriteAlarmCounter>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2204      	movs	r2, #4
 800252a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e006      	b.n	8002544 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	91a2b3c5 	.word	0x91a2b3c5
 8002550:	aaaaaaab 	.word	0xaaaaaaab
 8002554:	00015180 	.word	0x00015180

08002558 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2100      	movs	r1, #0
 800256a:	460a      	mov	r2, r1
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	460a      	mov	r2, r1
 8002570:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_RTC_GetDate+0x26>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e03a      	b.n	80025f8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	2200      	movs	r2, #0
 8002588:	4619      	mov	r1, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff fe56 	bl	800223c <HAL_RTC_GetTime>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e02e      	b.n	80025f8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	7b1a      	ldrb	r2, [r3, #12]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	7bda      	ldrb	r2, [r3, #15]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	7b5a      	ldrb	r2, [r3, #13]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	7b9a      	ldrb	r2, [r3, #14]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01a      	beq.n	80025f6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	78db      	ldrb	r3, [r3, #3]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f92f 	bl	8002828 <RTC_ByteToBcd2>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f926 	bl	8002828 <RTC_ByteToBcd2>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f91d 	bl	8002828 <RTC_ByteToBcd2>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01d      	b.n	8002652 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002626:	f7fe fcc3 	bl	8000fb0 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800262c:	e009      	b.n	8002642 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800262e:	f7fe fcbf 	bl	8000fb0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263c:	d901      	bls.n	8002642 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e007      	b.n	8002652 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ee      	beq.n	800262e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	827b      	strh	r3, [r7, #18]
 8002666:	2300      	movs	r3, #0
 8002668:	823b      	strh	r3, [r7, #16]
 800266a:	2300      	movs	r3, #0
 800266c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800268a:	8a7a      	ldrh	r2, [r7, #18]
 800268c:	8a3b      	ldrh	r3, [r7, #16]
 800268e:	429a      	cmp	r2, r3
 8002690:	d008      	beq.n	80026a4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002692:	8a3b      	ldrh	r3, [r7, #16]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e004      	b.n	80026ae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80026a4:	8a7b      	ldrh	r3, [r7, #18]
 80026a6:	041a      	lsls	r2, r3, #16
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80026ae:	697b      	ldr	r3, [r7, #20]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f85d 	bl	8002788 <RTC_EnterInitMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e011      	b.n	80026fe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	0c12      	lsrs	r2, r2, #16
 80026e2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b292      	uxth	r2, r2
 80026ec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f872 	bl	80027d8 <RTC_ExitInitMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	81fb      	strh	r3, [r7, #14]
 8002714:	2300      	movs	r3, #0
 8002716:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	041a      	lsls	r2, r3, #16
 800272c:	89bb      	ldrh	r3, [r7, #12]
 800272e:	4313      	orrs	r3, r2
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f81d 	bl	8002788 <RTC_EnterInitMode>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e011      	b.n	800277e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	0c12      	lsrs	r2, r2, #16
 8002762:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b292      	uxth	r2, r2
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f832 	bl	80027d8 <RTC_ExitInitMode>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002794:	f7fe fc0c 	bl	8000fb0 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800279a:	e009      	b.n	80027b0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800279c:	f7fe fc08 	bl	8000fb0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027aa:	d901      	bls.n	80027b0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e00f      	b.n	80027d0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0210 	orr.w	r2, r2, #16
 80027cc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0210 	bic.w	r2, r2, #16
 80027f2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027f4:	f7fe fbdc 	bl	8000fb0 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027fa:	e009      	b.n	8002810 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027fc:	f7fe fbd8 	bl	8000fb0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280a:	d901      	bls.n	8002810 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e007      	b.n	8002820 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002836:	e005      	b.n	8002844 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	3b0a      	subs	r3, #10
 8002842:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b09      	cmp	r3, #9
 8002848:	d8f6      	bhi.n	8002838 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	b2da      	uxtb	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4313      	orrs	r3, r2
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4413      	add	r3, r2
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7bdb      	ldrb	r3, [r3, #15]
 80028ba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7b5b      	ldrb	r3, [r3, #13]
 80028c0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7b9b      	ldrb	r3, [r3, #14]
 80028c6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e06f      	b.n	80029ae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d011      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d00e      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d00b      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	d008      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d005      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0a      	cmp	r3, #10
 80028f0:	d002      	beq.n	80028f8 <RTC_DateUpdate+0x5c>
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d117      	bne.n	8002928 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b1e      	cmp	r3, #30
 80028fc:	d803      	bhi.n	8002906 <RTC_DateUpdate+0x6a>
      {
        day++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002904:	e050      	b.n	80029a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d005      	beq.n	8002918 <RTC_DateUpdate+0x7c>
        {
          month++;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002912:	2301      	movs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002916:	e047      	b.n	80029a8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
          year++;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002926:	e03f      	b.n	80029a8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d008      	beq.n	8002940 <RTC_DateUpdate+0xa4>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d005      	beq.n	8002940 <RTC_DateUpdate+0xa4>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d002      	beq.n	8002940 <RTC_DateUpdate+0xa4>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b0b      	cmp	r3, #11
 800293e:	d10c      	bne.n	800295a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b1d      	cmp	r3, #29
 8002944:	d803      	bhi.n	800294e <RTC_DateUpdate+0xb2>
      {
        day++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3301      	adds	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800294c:	e02c      	b.n	80029a8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	3301      	adds	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002958:	e026      	b.n	80029a8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b1b      	cmp	r3, #27
 8002964:	d803      	bhi.n	800296e <RTC_DateUpdate+0xd2>
      {
        day++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e01c      	b.n	80029a8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b1c      	cmp	r3, #28
 8002972:	d111      	bne.n	8002998 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	b29b      	uxth	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f839 	bl	80029f0 <RTC_IsLeapYear>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <RTC_DateUpdate+0xf0>
        {
          day++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e00d      	b.n	80029a8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3301      	adds	r3, #1
 8002990:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002992:	2301      	movs	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e007      	b.n	80029a8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b1d      	cmp	r3, #29
 800299c:	d104      	bne.n	80029a8 <RTC_DateUpdate+0x10c>
      {
        month++;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3301      	adds	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80029a4:	2301      	movs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d38b      	bcc.n	80028ce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f000 f83b 	bl	8002a54 <RTC_WeekDayNum>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	731a      	strb	r2, [r3, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e01d      	b.n	8002a46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <RTC_IsLeapYear+0x60>)
 8002a0e:	fba2 1203 	umull	r1, r2, r2, r3
 8002a12:	0952      	lsrs	r2, r2, #5
 8002a14:	2164      	movs	r1, #100	; 0x64
 8002a16:	fb01 f202 	mul.w	r2, r1, r2
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <RTC_IsLeapYear+0x60>)
 8002a2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002a2e:	09d2      	lsrs	r2, r2, #7
 8002a30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a34:	fb01 f202 	mul.w	r2, r1, r2
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002a44:	2300      	movs	r3, #0
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	51eb851f 	.word	0x51eb851f

08002a54 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
 8002a60:	4613      	mov	r3, r2
 8002a62:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a72:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d82d      	bhi.n	8002ad6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <RTC_WeekDayNum+0xe4>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	085a      	lsrs	r2, r3, #1
 8002a8e:	78bb      	ldrb	r3, [r7, #2]
 8002a90:	441a      	add	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	441a      	add	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4926      	ldr	r1, [pc, #152]	; (8002b3c <RTC_WeekDayNum+0xe8>)
 8002aa4:	fba1 1303 	umull	r1, r3, r1, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4922      	ldr	r1, [pc, #136]	; (8002b3c <RTC_WeekDayNum+0xe8>)
 8002ab2:	fba1 1303 	umull	r1, r3, r1, r3
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	4413      	add	r3, r2
 8002aba:	1d1a      	adds	r2, r3, #4
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <RTC_WeekDayNum+0xec>)
 8002abe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac2:	1ad1      	subs	r1, r2, r3
 8002ac4:	0849      	lsrs	r1, r1, #1
 8002ac6:	440b      	add	r3, r1
 8002ac8:	0899      	lsrs	r1, r3, #2
 8002aca:	460b      	mov	r3, r1
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a5b      	subs	r3, r3, r1
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e029      	b.n	8002b2a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <RTC_WeekDayNum+0xe4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	085a      	lsrs	r2, r3, #1
 8002aea:	78bb      	ldrb	r3, [r7, #2]
 8002aec:	441a      	add	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	441a      	add	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4910      	ldr	r1, [pc, #64]	; (8002b3c <RTC_WeekDayNum+0xe8>)
 8002afc:	fba1 1303 	umull	r1, r3, r1, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	1ad2      	subs	r2, r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	490d      	ldr	r1, [pc, #52]	; (8002b3c <RTC_WeekDayNum+0xe8>)
 8002b08:	fba1 1303 	umull	r1, r3, r1, r3
 8002b0c:	09db      	lsrs	r3, r3, #7
 8002b0e:	4413      	add	r3, r2
 8002b10:	1c9a      	adds	r2, r3, #2
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <RTC_WeekDayNum+0xec>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	1ad1      	subs	r1, r2, r3
 8002b1a:	0849      	lsrs	r1, r1, #1
 8002b1c:	440b      	add	r3, r1
 8002b1e:	0899      	lsrs	r1, r3, #2
 8002b20:	460b      	mov	r3, r1
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	b2db      	uxtb	r3, r3
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	38e38e39 	.word	0x38e38e39
 8002b3c:	51eb851f 	.word	0x51eb851f
 8002b40:	24924925 	.word	0x24924925

08002b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e076      	b.n	8002c44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b66:	d009      	beq.n	8002b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
 8002b6e:	e005      	b.n	8002b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe f8ea 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	0c1a      	lsrs	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f002 0204 	and.w	r2, r2, #4
 8002c22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_SPI_Transmit+0x22>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e12d      	b.n	8002eca <HAL_SPI_Transmit+0x27e>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c76:	f7fe f99b 	bl	8000fb0 <HAL_GetTick>
 8002c7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c90:	e116      	b.n	8002ec0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Transmit+0x52>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca2:	e10d      	b.n	8002ec0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d10f      	bne.n	8002d0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d007      	beq.n	8002d2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d14f      	bne.n	8002dd4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0xf6>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d142      	bne.n	8002dc8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c9a      	adds	r2, r3, #2
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d66:	e02f      	b.n	8002dc8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d112      	bne.n	8002d9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	881a      	ldrh	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9a:	e015      	b.n	8002dc8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9c:	f7fe f908 	bl	8000fb0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d803      	bhi.n	8002db4 <HAL_SPI_Transmit+0x168>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_Transmit+0x16e>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dc6:	e07b      	b.n	8002ec0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ca      	bne.n	8002d68 <HAL_SPI_Transmit+0x11c>
 8002dd2:	e050      	b.n	8002e76 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_SPI_Transmit+0x196>
 8002ddc:	8afb      	ldrh	r3, [r7, #22]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d144      	bne.n	8002e6c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e08:	e030      	b.n	8002e6c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d113      	bne.n	8002e40 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	7812      	ldrb	r2, [r2, #0]
 8002e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e3e:	e015      	b.n	8002e6c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e40:	f7fe f8b6 	bl	8000fb0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d803      	bhi.n	8002e58 <HAL_SPI_Transmit+0x20c>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Transmit+0x212>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e6a:	e029      	b.n	8002ec0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1c9      	bne.n	8002e0a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8b2 	bl	8002fe4 <SPI_EndRxTxTransaction>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e003      	b.n	8002ec0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ee4:	f7fe f864 	bl	8000fb0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ef4:	f7fe f85c 	bl	8000fb0 <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	015b      	lsls	r3, r3, #5
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0a:	e054      	b.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d050      	beq.n	8002fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f14:	f7fe f84c 	bl	8000fb0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d902      	bls.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13d      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f42:	d111      	bne.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	d004      	beq.n	8002f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d107      	bne.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f70:	d10f      	bne.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e017      	b.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	2300      	movne	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d19b      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff6a 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e000      	b.n	8003018 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <sbrk_aligned>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0e      	ldr	r6, [pc, #56]	; (800305c <sbrk_aligned+0x3c>)
 8003024:	460c      	mov	r4, r1
 8003026:	6831      	ldr	r1, [r6, #0]
 8003028:	4605      	mov	r5, r0
 800302a:	b911      	cbnz	r1, 8003032 <sbrk_aligned+0x12>
 800302c:	f000 f8dc 	bl	80031e8 <_sbrk_r>
 8003030:	6030      	str	r0, [r6, #0]
 8003032:	4621      	mov	r1, r4
 8003034:	4628      	mov	r0, r5
 8003036:	f000 f8d7 	bl	80031e8 <_sbrk_r>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	d00a      	beq.n	8003054 <sbrk_aligned+0x34>
 800303e:	1cc4      	adds	r4, r0, #3
 8003040:	f024 0403 	bic.w	r4, r4, #3
 8003044:	42a0      	cmp	r0, r4
 8003046:	d007      	beq.n	8003058 <sbrk_aligned+0x38>
 8003048:	1a21      	subs	r1, r4, r0
 800304a:	4628      	mov	r0, r5
 800304c:	f000 f8cc 	bl	80031e8 <_sbrk_r>
 8003050:	3001      	adds	r0, #1
 8003052:	d101      	bne.n	8003058 <sbrk_aligned+0x38>
 8003054:	f04f 34ff 	mov.w	r4, #4294967295
 8003058:	4620      	mov	r0, r4
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	20000108 	.word	0x20000108

08003060 <_malloc_r>:
 8003060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003064:	1ccd      	adds	r5, r1, #3
 8003066:	f025 0503 	bic.w	r5, r5, #3
 800306a:	3508      	adds	r5, #8
 800306c:	2d0c      	cmp	r5, #12
 800306e:	bf38      	it	cc
 8003070:	250c      	movcc	r5, #12
 8003072:	2d00      	cmp	r5, #0
 8003074:	4607      	mov	r7, r0
 8003076:	db01      	blt.n	800307c <_malloc_r+0x1c>
 8003078:	42a9      	cmp	r1, r5
 800307a:	d905      	bls.n	8003088 <_malloc_r+0x28>
 800307c:	230c      	movs	r3, #12
 800307e:	2600      	movs	r6, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4630      	mov	r0, r6
 8003084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003088:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800315c <_malloc_r+0xfc>
 800308c:	f000 f868 	bl	8003160 <__malloc_lock>
 8003090:	f8d8 3000 	ldr.w	r3, [r8]
 8003094:	461c      	mov	r4, r3
 8003096:	bb5c      	cbnz	r4, 80030f0 <_malloc_r+0x90>
 8003098:	4629      	mov	r1, r5
 800309a:	4638      	mov	r0, r7
 800309c:	f7ff ffc0 	bl	8003020 <sbrk_aligned>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	4604      	mov	r4, r0
 80030a4:	d155      	bne.n	8003152 <_malloc_r+0xf2>
 80030a6:	f8d8 4000 	ldr.w	r4, [r8]
 80030aa:	4626      	mov	r6, r4
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	d145      	bne.n	800313c <_malloc_r+0xdc>
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	d048      	beq.n	8003146 <_malloc_r+0xe6>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	4631      	mov	r1, r6
 80030b8:	4638      	mov	r0, r7
 80030ba:	eb04 0903 	add.w	r9, r4, r3
 80030be:	f000 f893 	bl	80031e8 <_sbrk_r>
 80030c2:	4581      	cmp	r9, r0
 80030c4:	d13f      	bne.n	8003146 <_malloc_r+0xe6>
 80030c6:	6821      	ldr	r1, [r4, #0]
 80030c8:	4638      	mov	r0, r7
 80030ca:	1a6d      	subs	r5, r5, r1
 80030cc:	4629      	mov	r1, r5
 80030ce:	f7ff ffa7 	bl	8003020 <sbrk_aligned>
 80030d2:	3001      	adds	r0, #1
 80030d4:	d037      	beq.n	8003146 <_malloc_r+0xe6>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	442b      	add	r3, r5
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	f8d8 3000 	ldr.w	r3, [r8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d038      	beq.n	8003156 <_malloc_r+0xf6>
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	42a2      	cmp	r2, r4
 80030e8:	d12b      	bne.n	8003142 <_malloc_r+0xe2>
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e00f      	b.n	8003110 <_malloc_r+0xb0>
 80030f0:	6822      	ldr	r2, [r4, #0]
 80030f2:	1b52      	subs	r2, r2, r5
 80030f4:	d41f      	bmi.n	8003136 <_malloc_r+0xd6>
 80030f6:	2a0b      	cmp	r2, #11
 80030f8:	d917      	bls.n	800312a <_malloc_r+0xca>
 80030fa:	1961      	adds	r1, r4, r5
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	6025      	str	r5, [r4, #0]
 8003100:	bf18      	it	ne
 8003102:	6059      	strne	r1, [r3, #4]
 8003104:	6863      	ldr	r3, [r4, #4]
 8003106:	bf08      	it	eq
 8003108:	f8c8 1000 	streq.w	r1, [r8]
 800310c:	5162      	str	r2, [r4, r5]
 800310e:	604b      	str	r3, [r1, #4]
 8003110:	4638      	mov	r0, r7
 8003112:	f104 060b 	add.w	r6, r4, #11
 8003116:	f000 f829 	bl	800316c <__malloc_unlock>
 800311a:	f026 0607 	bic.w	r6, r6, #7
 800311e:	1d23      	adds	r3, r4, #4
 8003120:	1af2      	subs	r2, r6, r3
 8003122:	d0ae      	beq.n	8003082 <_malloc_r+0x22>
 8003124:	1b9b      	subs	r3, r3, r6
 8003126:	50a3      	str	r3, [r4, r2]
 8003128:	e7ab      	b.n	8003082 <_malloc_r+0x22>
 800312a:	42a3      	cmp	r3, r4
 800312c:	6862      	ldr	r2, [r4, #4]
 800312e:	d1dd      	bne.n	80030ec <_malloc_r+0x8c>
 8003130:	f8c8 2000 	str.w	r2, [r8]
 8003134:	e7ec      	b.n	8003110 <_malloc_r+0xb0>
 8003136:	4623      	mov	r3, r4
 8003138:	6864      	ldr	r4, [r4, #4]
 800313a:	e7ac      	b.n	8003096 <_malloc_r+0x36>
 800313c:	4634      	mov	r4, r6
 800313e:	6876      	ldr	r6, [r6, #4]
 8003140:	e7b4      	b.n	80030ac <_malloc_r+0x4c>
 8003142:	4613      	mov	r3, r2
 8003144:	e7cc      	b.n	80030e0 <_malloc_r+0x80>
 8003146:	230c      	movs	r3, #12
 8003148:	4638      	mov	r0, r7
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	f000 f80e 	bl	800316c <__malloc_unlock>
 8003150:	e797      	b.n	8003082 <_malloc_r+0x22>
 8003152:	6025      	str	r5, [r4, #0]
 8003154:	e7dc      	b.n	8003110 <_malloc_r+0xb0>
 8003156:	605b      	str	r3, [r3, #4]
 8003158:	deff      	udf	#255	; 0xff
 800315a:	bf00      	nop
 800315c:	20000104 	.word	0x20000104

08003160 <__malloc_lock>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__malloc_lock+0x8>)
 8003162:	f000 b87b 	b.w	800325c <__retarget_lock_acquire_recursive>
 8003166:	bf00      	nop
 8003168:	20000248 	.word	0x20000248

0800316c <__malloc_unlock>:
 800316c:	4801      	ldr	r0, [pc, #4]	; (8003174 <__malloc_unlock+0x8>)
 800316e:	f000 b876 	b.w	800325e <__retarget_lock_release_recursive>
 8003172:	bf00      	nop
 8003174:	20000248 	.word	0x20000248

08003178 <siprintf>:
 8003178:	b40e      	push	{r1, r2, r3}
 800317a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800317e:	b500      	push	{lr}
 8003180:	b09c      	sub	sp, #112	; 0x70
 8003182:	ab1d      	add	r3, sp, #116	; 0x74
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	9006      	str	r0, [sp, #24]
 8003188:	9107      	str	r1, [sp, #28]
 800318a:	9104      	str	r1, [sp, #16]
 800318c:	4808      	ldr	r0, [pc, #32]	; (80031b0 <siprintf+0x38>)
 800318e:	4909      	ldr	r1, [pc, #36]	; (80031b4 <siprintf+0x3c>)
 8003190:	f853 2b04 	ldr.w	r2, [r3], #4
 8003194:	9105      	str	r1, [sp, #20]
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	a902      	add	r1, sp, #8
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	f000 f902 	bl	80033a4 <_svfiprintf_r>
 80031a0:	2200      	movs	r2, #0
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	b01c      	add	sp, #112	; 0x70
 80031a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ac:	b003      	add	sp, #12
 80031ae:	4770      	bx	lr
 80031b0:	20000068 	.word	0x20000068
 80031b4:	ffff0208 	.word	0xffff0208

080031b8 <memset>:
 80031b8:	4603      	mov	r3, r0
 80031ba:	4402      	add	r2, r0
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	f803 1b01 	strb.w	r1, [r3], #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <strcat>:
 80031c8:	4602      	mov	r2, r0
 80031ca:	b510      	push	{r4, lr}
 80031cc:	7814      	ldrb	r4, [r2, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	3201      	adds	r2, #1
 80031d2:	2c00      	cmp	r4, #0
 80031d4:	d1fa      	bne.n	80031cc <strcat+0x4>
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d1f9      	bne.n	80031d8 <strcat+0x10>
 80031e4:	bd10      	pop	{r4, pc}
	...

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	2300      	movs	r3, #0
 80031ec:	4d05      	ldr	r5, [pc, #20]	; (8003204 <_sbrk_r+0x1c>)
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fe22 	bl	8000e3c <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000244 	.word	0x20000244

08003208 <__errno>:
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <__errno+0x8>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000068 	.word	0x20000068

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	2600      	movs	r6, #0
 8003218:	4d0c      	ldr	r5, [pc, #48]	; (800324c <__libc_init_array+0x38>)
 800321a:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	42a6      	cmp	r6, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	f000 fbbe 	bl	80039a4 <_init>
 8003228:	2600      	movs	r6, #0
 800322a:	4d0a      	ldr	r5, [pc, #40]	; (8003254 <__libc_init_array+0x40>)
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <__libc_init_array+0x44>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	42a6      	cmp	r6, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f855 3b04 	ldr.w	r3, [r5], #4
 800323c:	4798      	blx	r3
 800323e:	3601      	adds	r6, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f855 3b04 	ldr.w	r3, [r5], #4
 8003246:	4798      	blx	r3
 8003248:	3601      	adds	r6, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	08004fd8 	.word	0x08004fd8
 8003250:	08004fd8 	.word	0x08004fd8
 8003254:	08004fd8 	.word	0x08004fd8
 8003258:	08004fdc 	.word	0x08004fdc

0800325c <__retarget_lock_acquire_recursive>:
 800325c:	4770      	bx	lr

0800325e <__retarget_lock_release_recursive>:
 800325e:	4770      	bx	lr

08003260 <_free_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4605      	mov	r5, r0
 8003264:	2900      	cmp	r1, #0
 8003266:	d040      	beq.n	80032ea <_free_r+0x8a>
 8003268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800326c:	1f0c      	subs	r4, r1, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfb8      	it	lt
 8003272:	18e4      	addlt	r4, r4, r3
 8003274:	f7ff ff74 	bl	8003160 <__malloc_lock>
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <_free_r+0x8c>)
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	b933      	cbnz	r3, 800328c <_free_r+0x2c>
 800327e:	6063      	str	r3, [r4, #4]
 8003280:	6014      	str	r4, [r2, #0]
 8003282:	4628      	mov	r0, r5
 8003284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003288:	f7ff bf70 	b.w	800316c <__malloc_unlock>
 800328c:	42a3      	cmp	r3, r4
 800328e:	d908      	bls.n	80032a2 <_free_r+0x42>
 8003290:	6820      	ldr	r0, [r4, #0]
 8003292:	1821      	adds	r1, r4, r0
 8003294:	428b      	cmp	r3, r1
 8003296:	bf01      	itttt	eq
 8003298:	6819      	ldreq	r1, [r3, #0]
 800329a:	685b      	ldreq	r3, [r3, #4]
 800329c:	1809      	addeq	r1, r1, r0
 800329e:	6021      	streq	r1, [r4, #0]
 80032a0:	e7ed      	b.n	800327e <_free_r+0x1e>
 80032a2:	461a      	mov	r2, r3
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	b10b      	cbz	r3, 80032ac <_free_r+0x4c>
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	d9fa      	bls.n	80032a2 <_free_r+0x42>
 80032ac:	6811      	ldr	r1, [r2, #0]
 80032ae:	1850      	adds	r0, r2, r1
 80032b0:	42a0      	cmp	r0, r4
 80032b2:	d10b      	bne.n	80032cc <_free_r+0x6c>
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	4401      	add	r1, r0
 80032b8:	1850      	adds	r0, r2, r1
 80032ba:	4283      	cmp	r3, r0
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	d1e0      	bne.n	8003282 <_free_r+0x22>
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4408      	add	r0, r1
 80032c6:	6010      	str	r0, [r2, #0]
 80032c8:	6053      	str	r3, [r2, #4]
 80032ca:	e7da      	b.n	8003282 <_free_r+0x22>
 80032cc:	d902      	bls.n	80032d4 <_free_r+0x74>
 80032ce:	230c      	movs	r3, #12
 80032d0:	602b      	str	r3, [r5, #0]
 80032d2:	e7d6      	b.n	8003282 <_free_r+0x22>
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	1821      	adds	r1, r4, r0
 80032d8:	428b      	cmp	r3, r1
 80032da:	bf01      	itttt	eq
 80032dc:	6819      	ldreq	r1, [r3, #0]
 80032de:	685b      	ldreq	r3, [r3, #4]
 80032e0:	1809      	addeq	r1, r1, r0
 80032e2:	6021      	streq	r1, [r4, #0]
 80032e4:	6063      	str	r3, [r4, #4]
 80032e6:	6054      	str	r4, [r2, #4]
 80032e8:	e7cb      	b.n	8003282 <_free_r+0x22>
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	20000104 	.word	0x20000104

080032f0 <__ssputs_r>:
 80032f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f4:	461f      	mov	r7, r3
 80032f6:	688e      	ldr	r6, [r1, #8]
 80032f8:	4682      	mov	sl, r0
 80032fa:	42be      	cmp	r6, r7
 80032fc:	460c      	mov	r4, r1
 80032fe:	4690      	mov	r8, r2
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	d82c      	bhi.n	800335e <__ssputs_r+0x6e>
 8003304:	898a      	ldrh	r2, [r1, #12]
 8003306:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800330a:	d026      	beq.n	800335a <__ssputs_r+0x6a>
 800330c:	6965      	ldr	r5, [r4, #20]
 800330e:	6909      	ldr	r1, [r1, #16]
 8003310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003314:	eba3 0901 	sub.w	r9, r3, r1
 8003318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800331c:	1c7b      	adds	r3, r7, #1
 800331e:	444b      	add	r3, r9
 8003320:	106d      	asrs	r5, r5, #1
 8003322:	429d      	cmp	r5, r3
 8003324:	bf38      	it	cc
 8003326:	461d      	movcc	r5, r3
 8003328:	0553      	lsls	r3, r2, #21
 800332a:	d527      	bpl.n	800337c <__ssputs_r+0x8c>
 800332c:	4629      	mov	r1, r5
 800332e:	f7ff fe97 	bl	8003060 <_malloc_r>
 8003332:	4606      	mov	r6, r0
 8003334:	b360      	cbz	r0, 8003390 <__ssputs_r+0xa0>
 8003336:	464a      	mov	r2, r9
 8003338:	6921      	ldr	r1, [r4, #16]
 800333a:	f000 faed 	bl	8003918 <memcpy>
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	6126      	str	r6, [r4, #16]
 800334c:	444e      	add	r6, r9
 800334e:	6026      	str	r6, [r4, #0]
 8003350:	463e      	mov	r6, r7
 8003352:	6165      	str	r5, [r4, #20]
 8003354:	eba5 0509 	sub.w	r5, r5, r9
 8003358:	60a5      	str	r5, [r4, #8]
 800335a:	42be      	cmp	r6, r7
 800335c:	d900      	bls.n	8003360 <__ssputs_r+0x70>
 800335e:	463e      	mov	r6, r7
 8003360:	4632      	mov	r2, r6
 8003362:	4641      	mov	r1, r8
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	f000 faaf 	bl	80038c8 <memmove>
 800336a:	2000      	movs	r0, #0
 800336c:	68a3      	ldr	r3, [r4, #8]
 800336e:	1b9b      	subs	r3, r3, r6
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	4433      	add	r3, r6
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	462a      	mov	r2, r5
 800337e:	f000 fad9 	bl	8003934 <_realloc_r>
 8003382:	4606      	mov	r6, r0
 8003384:	2800      	cmp	r0, #0
 8003386:	d1e0      	bne.n	800334a <__ssputs_r+0x5a>
 8003388:	4650      	mov	r0, sl
 800338a:	6921      	ldr	r1, [r4, #16]
 800338c:	f7ff ff68 	bl	8003260 <_free_r>
 8003390:	230c      	movs	r3, #12
 8003392:	f8ca 3000 	str.w	r3, [sl]
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	e7e9      	b.n	8003378 <__ssputs_r+0x88>

080033a4 <_svfiprintf_r>:
 80033a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a8:	4698      	mov	r8, r3
 80033aa:	898b      	ldrh	r3, [r1, #12]
 80033ac:	4607      	mov	r7, r0
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	460d      	mov	r5, r1
 80033b2:	4614      	mov	r4, r2
 80033b4:	b09d      	sub	sp, #116	; 0x74
 80033b6:	d50e      	bpl.n	80033d6 <_svfiprintf_r+0x32>
 80033b8:	690b      	ldr	r3, [r1, #16]
 80033ba:	b963      	cbnz	r3, 80033d6 <_svfiprintf_r+0x32>
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	f7ff fe4f 	bl	8003060 <_malloc_r>
 80033c2:	6028      	str	r0, [r5, #0]
 80033c4:	6128      	str	r0, [r5, #16]
 80033c6:	b920      	cbnz	r0, 80033d2 <_svfiprintf_r+0x2e>
 80033c8:	230c      	movs	r3, #12
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	e0d0      	b.n	8003574 <_svfiprintf_r+0x1d0>
 80033d2:	2340      	movs	r3, #64	; 0x40
 80033d4:	616b      	str	r3, [r5, #20]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9309      	str	r3, [sp, #36]	; 0x24
 80033da:	2320      	movs	r3, #32
 80033dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033e0:	2330      	movs	r3, #48	; 0x30
 80033e2:	f04f 0901 	mov.w	r9, #1
 80033e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800358c <_svfiprintf_r+0x1e8>
 80033ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033f2:	4623      	mov	r3, r4
 80033f4:	469a      	mov	sl, r3
 80033f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033fa:	b10a      	cbz	r2, 8003400 <_svfiprintf_r+0x5c>
 80033fc:	2a25      	cmp	r2, #37	; 0x25
 80033fe:	d1f9      	bne.n	80033f4 <_svfiprintf_r+0x50>
 8003400:	ebba 0b04 	subs.w	fp, sl, r4
 8003404:	d00b      	beq.n	800341e <_svfiprintf_r+0x7a>
 8003406:	465b      	mov	r3, fp
 8003408:	4622      	mov	r2, r4
 800340a:	4629      	mov	r1, r5
 800340c:	4638      	mov	r0, r7
 800340e:	f7ff ff6f 	bl	80032f0 <__ssputs_r>
 8003412:	3001      	adds	r0, #1
 8003414:	f000 80a9 	beq.w	800356a <_svfiprintf_r+0x1c6>
 8003418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800341a:	445a      	add	r2, fp
 800341c:	9209      	str	r2, [sp, #36]	; 0x24
 800341e:	f89a 3000 	ldrb.w	r3, [sl]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a1 	beq.w	800356a <_svfiprintf_r+0x1c6>
 8003428:	2300      	movs	r3, #0
 800342a:	f04f 32ff 	mov.w	r2, #4294967295
 800342e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003432:	f10a 0a01 	add.w	sl, sl, #1
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	9307      	str	r3, [sp, #28]
 800343a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800343e:	931a      	str	r3, [sp, #104]	; 0x68
 8003440:	4654      	mov	r4, sl
 8003442:	2205      	movs	r2, #5
 8003444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003448:	4850      	ldr	r0, [pc, #320]	; (800358c <_svfiprintf_r+0x1e8>)
 800344a:	f000 fa57 	bl	80038fc <memchr>
 800344e:	9a04      	ldr	r2, [sp, #16]
 8003450:	b9d8      	cbnz	r0, 800348a <_svfiprintf_r+0xe6>
 8003452:	06d0      	lsls	r0, r2, #27
 8003454:	bf44      	itt	mi
 8003456:	2320      	movmi	r3, #32
 8003458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800345c:	0711      	lsls	r1, r2, #28
 800345e:	bf44      	itt	mi
 8003460:	232b      	movmi	r3, #43	; 0x2b
 8003462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003466:	f89a 3000 	ldrb.w	r3, [sl]
 800346a:	2b2a      	cmp	r3, #42	; 0x2a
 800346c:	d015      	beq.n	800349a <_svfiprintf_r+0xf6>
 800346e:	4654      	mov	r4, sl
 8003470:	2000      	movs	r0, #0
 8003472:	f04f 0c0a 	mov.w	ip, #10
 8003476:	9a07      	ldr	r2, [sp, #28]
 8003478:	4621      	mov	r1, r4
 800347a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800347e:	3b30      	subs	r3, #48	; 0x30
 8003480:	2b09      	cmp	r3, #9
 8003482:	d94d      	bls.n	8003520 <_svfiprintf_r+0x17c>
 8003484:	b1b0      	cbz	r0, 80034b4 <_svfiprintf_r+0x110>
 8003486:	9207      	str	r2, [sp, #28]
 8003488:	e014      	b.n	80034b4 <_svfiprintf_r+0x110>
 800348a:	eba0 0308 	sub.w	r3, r0, r8
 800348e:	fa09 f303 	lsl.w	r3, r9, r3
 8003492:	4313      	orrs	r3, r2
 8003494:	46a2      	mov	sl, r4
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	e7d2      	b.n	8003440 <_svfiprintf_r+0x9c>
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	1d19      	adds	r1, r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	9103      	str	r1, [sp, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bfbb      	ittet	lt
 80034a6:	425b      	neglt	r3, r3
 80034a8:	f042 0202 	orrlt.w	r2, r2, #2
 80034ac:	9307      	strge	r3, [sp, #28]
 80034ae:	9307      	strlt	r3, [sp, #28]
 80034b0:	bfb8      	it	lt
 80034b2:	9204      	strlt	r2, [sp, #16]
 80034b4:	7823      	ldrb	r3, [r4, #0]
 80034b6:	2b2e      	cmp	r3, #46	; 0x2e
 80034b8:	d10c      	bne.n	80034d4 <_svfiprintf_r+0x130>
 80034ba:	7863      	ldrb	r3, [r4, #1]
 80034bc:	2b2a      	cmp	r3, #42	; 0x2a
 80034be:	d134      	bne.n	800352a <_svfiprintf_r+0x186>
 80034c0:	9b03      	ldr	r3, [sp, #12]
 80034c2:	3402      	adds	r4, #2
 80034c4:	1d1a      	adds	r2, r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	9203      	str	r2, [sp, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bfb8      	it	lt
 80034ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80034d2:	9305      	str	r3, [sp, #20]
 80034d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003590 <_svfiprintf_r+0x1ec>
 80034d8:	2203      	movs	r2, #3
 80034da:	4650      	mov	r0, sl
 80034dc:	7821      	ldrb	r1, [r4, #0]
 80034de:	f000 fa0d 	bl	80038fc <memchr>
 80034e2:	b138      	cbz	r0, 80034f4 <_svfiprintf_r+0x150>
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	9b04      	ldr	r3, [sp, #16]
 80034e8:	eba0 000a 	sub.w	r0, r0, sl
 80034ec:	4082      	lsls	r2, r0
 80034ee:	4313      	orrs	r3, r2
 80034f0:	3401      	adds	r4, #1
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	2206      	movs	r2, #6
 80034fa:	4826      	ldr	r0, [pc, #152]	; (8003594 <_svfiprintf_r+0x1f0>)
 80034fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003500:	f000 f9fc 	bl	80038fc <memchr>
 8003504:	2800      	cmp	r0, #0
 8003506:	d038      	beq.n	800357a <_svfiprintf_r+0x1d6>
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <_svfiprintf_r+0x1f4>)
 800350a:	bb1b      	cbnz	r3, 8003554 <_svfiprintf_r+0x1b0>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	3307      	adds	r3, #7
 8003510:	f023 0307 	bic.w	r3, r3, #7
 8003514:	3308      	adds	r3, #8
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800351a:	4433      	add	r3, r6
 800351c:	9309      	str	r3, [sp, #36]	; 0x24
 800351e:	e768      	b.n	80033f2 <_svfiprintf_r+0x4e>
 8003520:	460c      	mov	r4, r1
 8003522:	2001      	movs	r0, #1
 8003524:	fb0c 3202 	mla	r2, ip, r2, r3
 8003528:	e7a6      	b.n	8003478 <_svfiprintf_r+0xd4>
 800352a:	2300      	movs	r3, #0
 800352c:	f04f 0c0a 	mov.w	ip, #10
 8003530:	4619      	mov	r1, r3
 8003532:	3401      	adds	r4, #1
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	4620      	mov	r0, r4
 8003538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800353c:	3a30      	subs	r2, #48	; 0x30
 800353e:	2a09      	cmp	r2, #9
 8003540:	d903      	bls.n	800354a <_svfiprintf_r+0x1a6>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0c6      	beq.n	80034d4 <_svfiprintf_r+0x130>
 8003546:	9105      	str	r1, [sp, #20]
 8003548:	e7c4      	b.n	80034d4 <_svfiprintf_r+0x130>
 800354a:	4604      	mov	r4, r0
 800354c:	2301      	movs	r3, #1
 800354e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003552:	e7f0      	b.n	8003536 <_svfiprintf_r+0x192>
 8003554:	ab03      	add	r3, sp, #12
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	462a      	mov	r2, r5
 800355a:	4638      	mov	r0, r7
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <_svfiprintf_r+0x1f8>)
 800355e:	a904      	add	r1, sp, #16
 8003560:	f3af 8000 	nop.w
 8003564:	1c42      	adds	r2, r0, #1
 8003566:	4606      	mov	r6, r0
 8003568:	d1d6      	bne.n	8003518 <_svfiprintf_r+0x174>
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	065b      	lsls	r3, r3, #25
 800356e:	f53f af2d 	bmi.w	80033cc <_svfiprintf_r+0x28>
 8003572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003574:	b01d      	add	sp, #116	; 0x74
 8003576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357a:	ab03      	add	r3, sp, #12
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	462a      	mov	r2, r5
 8003580:	4638      	mov	r0, r7
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <_svfiprintf_r+0x1f8>)
 8003584:	a904      	add	r1, sp, #16
 8003586:	f000 f87d 	bl	8003684 <_printf_i>
 800358a:	e7eb      	b.n	8003564 <_svfiprintf_r+0x1c0>
 800358c:	08004fa2 	.word	0x08004fa2
 8003590:	08004fa8 	.word	0x08004fa8
 8003594:	08004fac 	.word	0x08004fac
 8003598:	00000000 	.word	0x00000000
 800359c:	080032f1 	.word	0x080032f1

080035a0 <_printf_common>:
 80035a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	4616      	mov	r6, r2
 80035a6:	4699      	mov	r9, r3
 80035a8:	688a      	ldr	r2, [r1, #8]
 80035aa:	690b      	ldr	r3, [r1, #16]
 80035ac:	4607      	mov	r7, r0
 80035ae:	4293      	cmp	r3, r2
 80035b0:	bfb8      	it	lt
 80035b2:	4613      	movlt	r3, r2
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035ba:	460c      	mov	r4, r1
 80035bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035c0:	b10a      	cbz	r2, 80035c6 <_printf_common+0x26>
 80035c2:	3301      	adds	r3, #1
 80035c4:	6033      	str	r3, [r6, #0]
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	0699      	lsls	r1, r3, #26
 80035ca:	bf42      	ittt	mi
 80035cc:	6833      	ldrmi	r3, [r6, #0]
 80035ce:	3302      	addmi	r3, #2
 80035d0:	6033      	strmi	r3, [r6, #0]
 80035d2:	6825      	ldr	r5, [r4, #0]
 80035d4:	f015 0506 	ands.w	r5, r5, #6
 80035d8:	d106      	bne.n	80035e8 <_printf_common+0x48>
 80035da:	f104 0a19 	add.w	sl, r4, #25
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	6832      	ldr	r2, [r6, #0]
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	dc2b      	bgt.n	8003640 <_printf_common+0xa0>
 80035e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035ec:	1e13      	subs	r3, r2, #0
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	bf18      	it	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	0692      	lsls	r2, r2, #26
 80035f6:	d430      	bmi.n	800365a <_printf_common+0xba>
 80035f8:	4649      	mov	r1, r9
 80035fa:	4638      	mov	r0, r7
 80035fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d023      	beq.n	800364e <_printf_common+0xae>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	6922      	ldr	r2, [r4, #16]
 800360a:	f003 0306 	and.w	r3, r3, #6
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf14      	ite	ne
 8003612:	2500      	movne	r5, #0
 8003614:	6833      	ldreq	r3, [r6, #0]
 8003616:	f04f 0600 	mov.w	r6, #0
 800361a:	bf08      	it	eq
 800361c:	68e5      	ldreq	r5, [r4, #12]
 800361e:	f104 041a 	add.w	r4, r4, #26
 8003622:	bf08      	it	eq
 8003624:	1aed      	subeq	r5, r5, r3
 8003626:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800362a:	bf08      	it	eq
 800362c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003630:	4293      	cmp	r3, r2
 8003632:	bfc4      	itt	gt
 8003634:	1a9b      	subgt	r3, r3, r2
 8003636:	18ed      	addgt	r5, r5, r3
 8003638:	42b5      	cmp	r5, r6
 800363a:	d11a      	bne.n	8003672 <_printf_common+0xd2>
 800363c:	2000      	movs	r0, #0
 800363e:	e008      	b.n	8003652 <_printf_common+0xb2>
 8003640:	2301      	movs	r3, #1
 8003642:	4652      	mov	r2, sl
 8003644:	4649      	mov	r1, r9
 8003646:	4638      	mov	r0, r7
 8003648:	47c0      	blx	r8
 800364a:	3001      	adds	r0, #1
 800364c:	d103      	bne.n	8003656 <_printf_common+0xb6>
 800364e:	f04f 30ff 	mov.w	r0, #4294967295
 8003652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003656:	3501      	adds	r5, #1
 8003658:	e7c1      	b.n	80035de <_printf_common+0x3e>
 800365a:	2030      	movs	r0, #48	; 0x30
 800365c:	18e1      	adds	r1, r4, r3
 800365e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003668:	4422      	add	r2, r4
 800366a:	3302      	adds	r3, #2
 800366c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003670:	e7c2      	b.n	80035f8 <_printf_common+0x58>
 8003672:	2301      	movs	r3, #1
 8003674:	4622      	mov	r2, r4
 8003676:	4649      	mov	r1, r9
 8003678:	4638      	mov	r0, r7
 800367a:	47c0      	blx	r8
 800367c:	3001      	adds	r0, #1
 800367e:	d0e6      	beq.n	800364e <_printf_common+0xae>
 8003680:	3601      	adds	r6, #1
 8003682:	e7d9      	b.n	8003638 <_printf_common+0x98>

08003684 <_printf_i>:
 8003684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	7e0f      	ldrb	r7, [r1, #24]
 800368a:	4691      	mov	r9, r2
 800368c:	2f78      	cmp	r7, #120	; 0x78
 800368e:	4680      	mov	r8, r0
 8003690:	460c      	mov	r4, r1
 8003692:	469a      	mov	sl, r3
 8003694:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800369a:	d807      	bhi.n	80036ac <_printf_i+0x28>
 800369c:	2f62      	cmp	r7, #98	; 0x62
 800369e:	d80a      	bhi.n	80036b6 <_printf_i+0x32>
 80036a0:	2f00      	cmp	r7, #0
 80036a2:	f000 80d5 	beq.w	8003850 <_printf_i+0x1cc>
 80036a6:	2f58      	cmp	r7, #88	; 0x58
 80036a8:	f000 80c1 	beq.w	800382e <_printf_i+0x1aa>
 80036ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036b4:	e03a      	b.n	800372c <_printf_i+0xa8>
 80036b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ba:	2b15      	cmp	r3, #21
 80036bc:	d8f6      	bhi.n	80036ac <_printf_i+0x28>
 80036be:	a101      	add	r1, pc, #4	; (adr r1, 80036c4 <_printf_i+0x40>)
 80036c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c4:	0800371d 	.word	0x0800371d
 80036c8:	08003731 	.word	0x08003731
 80036cc:	080036ad 	.word	0x080036ad
 80036d0:	080036ad 	.word	0x080036ad
 80036d4:	080036ad 	.word	0x080036ad
 80036d8:	080036ad 	.word	0x080036ad
 80036dc:	08003731 	.word	0x08003731
 80036e0:	080036ad 	.word	0x080036ad
 80036e4:	080036ad 	.word	0x080036ad
 80036e8:	080036ad 	.word	0x080036ad
 80036ec:	080036ad 	.word	0x080036ad
 80036f0:	08003837 	.word	0x08003837
 80036f4:	0800375d 	.word	0x0800375d
 80036f8:	080037f1 	.word	0x080037f1
 80036fc:	080036ad 	.word	0x080036ad
 8003700:	080036ad 	.word	0x080036ad
 8003704:	08003859 	.word	0x08003859
 8003708:	080036ad 	.word	0x080036ad
 800370c:	0800375d 	.word	0x0800375d
 8003710:	080036ad 	.word	0x080036ad
 8003714:	080036ad 	.word	0x080036ad
 8003718:	080037f9 	.word	0x080037f9
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	602a      	str	r2, [r5, #0]
 8003724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800372c:	2301      	movs	r3, #1
 800372e:	e0a0      	b.n	8003872 <_printf_i+0x1ee>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	0607      	lsls	r7, r0, #24
 8003736:	f103 0104 	add.w	r1, r3, #4
 800373a:	6029      	str	r1, [r5, #0]
 800373c:	d501      	bpl.n	8003742 <_printf_i+0xbe>
 800373e:	681e      	ldr	r6, [r3, #0]
 8003740:	e003      	b.n	800374a <_printf_i+0xc6>
 8003742:	0646      	lsls	r6, r0, #25
 8003744:	d5fb      	bpl.n	800373e <_printf_i+0xba>
 8003746:	f9b3 6000 	ldrsh.w	r6, [r3]
 800374a:	2e00      	cmp	r6, #0
 800374c:	da03      	bge.n	8003756 <_printf_i+0xd2>
 800374e:	232d      	movs	r3, #45	; 0x2d
 8003750:	4276      	negs	r6, r6
 8003752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003756:	230a      	movs	r3, #10
 8003758:	4859      	ldr	r0, [pc, #356]	; (80038c0 <_printf_i+0x23c>)
 800375a:	e012      	b.n	8003782 <_printf_i+0xfe>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1d19      	adds	r1, r3, #4
 8003762:	6029      	str	r1, [r5, #0]
 8003764:	0605      	lsls	r5, r0, #24
 8003766:	d501      	bpl.n	800376c <_printf_i+0xe8>
 8003768:	681e      	ldr	r6, [r3, #0]
 800376a:	e002      	b.n	8003772 <_printf_i+0xee>
 800376c:	0641      	lsls	r1, r0, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0xe4>
 8003770:	881e      	ldrh	r6, [r3, #0]
 8003772:	2f6f      	cmp	r7, #111	; 0x6f
 8003774:	bf0c      	ite	eq
 8003776:	2308      	moveq	r3, #8
 8003778:	230a      	movne	r3, #10
 800377a:	4851      	ldr	r0, [pc, #324]	; (80038c0 <_printf_i+0x23c>)
 800377c:	2100      	movs	r1, #0
 800377e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003782:	6865      	ldr	r5, [r4, #4]
 8003784:	2d00      	cmp	r5, #0
 8003786:	bfa8      	it	ge
 8003788:	6821      	ldrge	r1, [r4, #0]
 800378a:	60a5      	str	r5, [r4, #8]
 800378c:	bfa4      	itt	ge
 800378e:	f021 0104 	bicge.w	r1, r1, #4
 8003792:	6021      	strge	r1, [r4, #0]
 8003794:	b90e      	cbnz	r6, 800379a <_printf_i+0x116>
 8003796:	2d00      	cmp	r5, #0
 8003798:	d04b      	beq.n	8003832 <_printf_i+0x1ae>
 800379a:	4615      	mov	r5, r2
 800379c:	fbb6 f1f3 	udiv	r1, r6, r3
 80037a0:	fb03 6711 	mls	r7, r3, r1, r6
 80037a4:	5dc7      	ldrb	r7, [r0, r7]
 80037a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037aa:	4637      	mov	r7, r6
 80037ac:	42bb      	cmp	r3, r7
 80037ae:	460e      	mov	r6, r1
 80037b0:	d9f4      	bls.n	800379c <_printf_i+0x118>
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d10b      	bne.n	80037ce <_printf_i+0x14a>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	07de      	lsls	r6, r3, #31
 80037ba:	d508      	bpl.n	80037ce <_printf_i+0x14a>
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	6861      	ldr	r1, [r4, #4]
 80037c0:	4299      	cmp	r1, r3
 80037c2:	bfde      	ittt	le
 80037c4:	2330      	movle	r3, #48	; 0x30
 80037c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037ce:	1b52      	subs	r2, r2, r5
 80037d0:	6122      	str	r2, [r4, #16]
 80037d2:	464b      	mov	r3, r9
 80037d4:	4621      	mov	r1, r4
 80037d6:	4640      	mov	r0, r8
 80037d8:	f8cd a000 	str.w	sl, [sp]
 80037dc:	aa03      	add	r2, sp, #12
 80037de:	f7ff fedf 	bl	80035a0 <_printf_common>
 80037e2:	3001      	adds	r0, #1
 80037e4:	d14a      	bne.n	800387c <_printf_i+0x1f8>
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ea:	b004      	add	sp, #16
 80037ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	2778      	movs	r7, #120	; 0x78
 80037fa:	4832      	ldr	r0, [pc, #200]	; (80038c4 <_printf_i+0x240>)
 80037fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6829      	ldr	r1, [r5, #0]
 8003804:	061f      	lsls	r7, r3, #24
 8003806:	f851 6b04 	ldr.w	r6, [r1], #4
 800380a:	d402      	bmi.n	8003812 <_printf_i+0x18e>
 800380c:	065f      	lsls	r7, r3, #25
 800380e:	bf48      	it	mi
 8003810:	b2b6      	uxthmi	r6, r6
 8003812:	07df      	lsls	r7, r3, #31
 8003814:	bf48      	it	mi
 8003816:	f043 0320 	orrmi.w	r3, r3, #32
 800381a:	6029      	str	r1, [r5, #0]
 800381c:	bf48      	it	mi
 800381e:	6023      	strmi	r3, [r4, #0]
 8003820:	b91e      	cbnz	r6, 800382a <_printf_i+0x1a6>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	f023 0320 	bic.w	r3, r3, #32
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	2310      	movs	r3, #16
 800382c:	e7a6      	b.n	800377c <_printf_i+0xf8>
 800382e:	4824      	ldr	r0, [pc, #144]	; (80038c0 <_printf_i+0x23c>)
 8003830:	e7e4      	b.n	80037fc <_printf_i+0x178>
 8003832:	4615      	mov	r5, r2
 8003834:	e7bd      	b.n	80037b2 <_printf_i+0x12e>
 8003836:	682b      	ldr	r3, [r5, #0]
 8003838:	6826      	ldr	r6, [r4, #0]
 800383a:	1d18      	adds	r0, r3, #4
 800383c:	6961      	ldr	r1, [r4, #20]
 800383e:	6028      	str	r0, [r5, #0]
 8003840:	0635      	lsls	r5, r6, #24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	d501      	bpl.n	800384a <_printf_i+0x1c6>
 8003846:	6019      	str	r1, [r3, #0]
 8003848:	e002      	b.n	8003850 <_printf_i+0x1cc>
 800384a:	0670      	lsls	r0, r6, #25
 800384c:	d5fb      	bpl.n	8003846 <_printf_i+0x1c2>
 800384e:	8019      	strh	r1, [r3, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	4615      	mov	r5, r2
 8003854:	6123      	str	r3, [r4, #16]
 8003856:	e7bc      	b.n	80037d2 <_printf_i+0x14e>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	2100      	movs	r1, #0
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	602a      	str	r2, [r5, #0]
 8003860:	681d      	ldr	r5, [r3, #0]
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	4628      	mov	r0, r5
 8003866:	f000 f849 	bl	80038fc <memchr>
 800386a:	b108      	cbz	r0, 8003870 <_printf_i+0x1ec>
 800386c:	1b40      	subs	r0, r0, r5
 800386e:	6060      	str	r0, [r4, #4]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800387a:	e7aa      	b.n	80037d2 <_printf_i+0x14e>
 800387c:	462a      	mov	r2, r5
 800387e:	4649      	mov	r1, r9
 8003880:	4640      	mov	r0, r8
 8003882:	6923      	ldr	r3, [r4, #16]
 8003884:	47d0      	blx	sl
 8003886:	3001      	adds	r0, #1
 8003888:	d0ad      	beq.n	80037e6 <_printf_i+0x162>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	079b      	lsls	r3, r3, #30
 800388e:	d413      	bmi.n	80038b8 <_printf_i+0x234>
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	9b03      	ldr	r3, [sp, #12]
 8003894:	4298      	cmp	r0, r3
 8003896:	bfb8      	it	lt
 8003898:	4618      	movlt	r0, r3
 800389a:	e7a6      	b.n	80037ea <_printf_i+0x166>
 800389c:	2301      	movs	r3, #1
 800389e:	4632      	mov	r2, r6
 80038a0:	4649      	mov	r1, r9
 80038a2:	4640      	mov	r0, r8
 80038a4:	47d0      	blx	sl
 80038a6:	3001      	adds	r0, #1
 80038a8:	d09d      	beq.n	80037e6 <_printf_i+0x162>
 80038aa:	3501      	adds	r5, #1
 80038ac:	68e3      	ldr	r3, [r4, #12]
 80038ae:	9903      	ldr	r1, [sp, #12]
 80038b0:	1a5b      	subs	r3, r3, r1
 80038b2:	42ab      	cmp	r3, r5
 80038b4:	dcf2      	bgt.n	800389c <_printf_i+0x218>
 80038b6:	e7eb      	b.n	8003890 <_printf_i+0x20c>
 80038b8:	2500      	movs	r5, #0
 80038ba:	f104 0619 	add.w	r6, r4, #25
 80038be:	e7f5      	b.n	80038ac <_printf_i+0x228>
 80038c0:	08004fb3 	.word	0x08004fb3
 80038c4:	08004fc4 	.word	0x08004fc4

080038c8 <memmove>:
 80038c8:	4288      	cmp	r0, r1
 80038ca:	b510      	push	{r4, lr}
 80038cc:	eb01 0402 	add.w	r4, r1, r2
 80038d0:	d902      	bls.n	80038d8 <memmove+0x10>
 80038d2:	4284      	cmp	r4, r0
 80038d4:	4623      	mov	r3, r4
 80038d6:	d807      	bhi.n	80038e8 <memmove+0x20>
 80038d8:	1e43      	subs	r3, r0, #1
 80038da:	42a1      	cmp	r1, r4
 80038dc:	d008      	beq.n	80038f0 <memmove+0x28>
 80038de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038e6:	e7f8      	b.n	80038da <memmove+0x12>
 80038e8:	4601      	mov	r1, r0
 80038ea:	4402      	add	r2, r0
 80038ec:	428a      	cmp	r2, r1
 80038ee:	d100      	bne.n	80038f2 <memmove+0x2a>
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038fa:	e7f7      	b.n	80038ec <memmove+0x24>

080038fc <memchr>:
 80038fc:	4603      	mov	r3, r0
 80038fe:	b510      	push	{r4, lr}
 8003900:	b2c9      	uxtb	r1, r1
 8003902:	4402      	add	r2, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	4618      	mov	r0, r3
 8003908:	d101      	bne.n	800390e <memchr+0x12>
 800390a:	2000      	movs	r0, #0
 800390c:	e003      	b.n	8003916 <memchr+0x1a>
 800390e:	7804      	ldrb	r4, [r0, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	428c      	cmp	r4, r1
 8003914:	d1f6      	bne.n	8003904 <memchr+0x8>
 8003916:	bd10      	pop	{r4, pc}

08003918 <memcpy>:
 8003918:	440a      	add	r2, r1
 800391a:	4291      	cmp	r1, r2
 800391c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	4770      	bx	lr
 8003924:	b510      	push	{r4, lr}
 8003926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392a:	4291      	cmp	r1, r2
 800392c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003930:	d1f9      	bne.n	8003926 <memcpy+0xe>
 8003932:	bd10      	pop	{r4, pc}

08003934 <_realloc_r>:
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	4680      	mov	r8, r0
 800393a:	4614      	mov	r4, r2
 800393c:	460e      	mov	r6, r1
 800393e:	b921      	cbnz	r1, 800394a <_realloc_r+0x16>
 8003940:	4611      	mov	r1, r2
 8003942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003946:	f7ff bb8b 	b.w	8003060 <_malloc_r>
 800394a:	b92a      	cbnz	r2, 8003958 <_realloc_r+0x24>
 800394c:	f7ff fc88 	bl	8003260 <_free_r>
 8003950:	4625      	mov	r5, r4
 8003952:	4628      	mov	r0, r5
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003958:	f000 f81b 	bl	8003992 <_malloc_usable_size_r>
 800395c:	4284      	cmp	r4, r0
 800395e:	4607      	mov	r7, r0
 8003960:	d802      	bhi.n	8003968 <_realloc_r+0x34>
 8003962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003966:	d812      	bhi.n	800398e <_realloc_r+0x5a>
 8003968:	4621      	mov	r1, r4
 800396a:	4640      	mov	r0, r8
 800396c:	f7ff fb78 	bl	8003060 <_malloc_r>
 8003970:	4605      	mov	r5, r0
 8003972:	2800      	cmp	r0, #0
 8003974:	d0ed      	beq.n	8003952 <_realloc_r+0x1e>
 8003976:	42bc      	cmp	r4, r7
 8003978:	4622      	mov	r2, r4
 800397a:	4631      	mov	r1, r6
 800397c:	bf28      	it	cs
 800397e:	463a      	movcs	r2, r7
 8003980:	f7ff ffca 	bl	8003918 <memcpy>
 8003984:	4631      	mov	r1, r6
 8003986:	4640      	mov	r0, r8
 8003988:	f7ff fc6a 	bl	8003260 <_free_r>
 800398c:	e7e1      	b.n	8003952 <_realloc_r+0x1e>
 800398e:	4635      	mov	r5, r6
 8003990:	e7df      	b.n	8003952 <_realloc_r+0x1e>

08003992 <_malloc_usable_size_r>:
 8003992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003996:	1f18      	subs	r0, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	bfbc      	itt	lt
 800399c:	580b      	ldrlt	r3, [r1, r0]
 800399e:	18c0      	addlt	r0, r0, r3
 80039a0:	4770      	bx	lr
	...

080039a4 <_init>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr

080039b0 <_fini>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr
